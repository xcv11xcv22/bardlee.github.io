<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
    <title>Jekyll Export</title>
    <link>http://example.com</link>
    <description>Exported from Jekyll</description>
    <pubDate>Tue, 09 Sep 2025 19:52:45 -0000</pubDate>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>http://example.com</wp:base_site_url>
    <wp:base_blog_url>http://example.com</wp:base_blog_url>
    <wp:author>
      <wp:author_login>admin</wp:author_login>
      <wp:author_email>admin@example.com</wp:author_email>
      <wp:author_display_name>
        <![CDATA[admin]]>
      </wp:author_display_name>
      <wp:author_first_name/>
      <wp:author_last_name/>
    </wp:author>
    <item>
      <title>50.Pow 次方解法</title>
      <link>http://example.com/50.Pow 次方解法/</link>
      <pubDate>Fri, 17 Mar 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-0-50.Pow 次方解法      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="50pow-次方解法">50.Pow 次方解法</h1>

<h2 id="算法">算法</h2>

<p>以2的六次方來說</p>

<p>2乘以六次，如果有一萬次的話，就要乘以一萬次，這做法肯定是不行的，花太多時間</p>

<p><img src="https://images2.imgbox.com/11/72/1gJ80Lq3_o.jpg?download=true" alt="RUNOOB 图标" /></p>

<p>我們可以發現</p>

<p><u> 2的6次方等於4的3次方 </u></p>

<p><u>4的3次方等於16的1次方<span style="color:#FF6600">乘以4</span></u></p>

<p>我們思考一下什麼情況下會多出<span style="color:#ff00ff"> <em>4</em> </span>這個數字</p>

<p>當次方是奇數的時候，會多出一個無法成對的數字</p>

<p>總和可以分成底數和額外數值，相乘就是最後的答案</p>

<h2 id="算到何時結束">算到何時結束</h2>

<p>這個算法是一個無限循環，直到次方小於等於0</p>

<ol>
  <li>判斷次方是不是奇數，是的話底數乘以額外數值</li>
  <li>底數自乘一次</li>
  <li>次方除以2</li>
</ol>

<p>這個循環之下我們可以得到越來越大的底數和越來越小的次方直到次方為0</p>

<p>並且可以把無法成對的數值而外使用一個數值去記起來</p>

<p>n 次方</p>

<p>base 額外數值</p>

<p>x 底數</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
  <span class="k">if</span><span class="o">((</span><span class="n">n</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
      <span class="n">base</span> <span class="o">*=</span> <span class="n">x</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="n">x</span> <span class="o">*=</span> <span class="n">x</span><span class="o">;</span>
  <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="該注意的點">該注意的點</h2>

<p><code>這個題目次方會給你負數的</code></p>

<p>2的2次方為例子</p>

<p>正的為4</p>

<p>負的為 1/ 4</p>

<h3 id="界線">界線</h3>

<p>2的-31次方 -2147483648要注意</p>

<p>取絕對值的時候會比整數2147483647還大，會造成計算錯誤</p>

<p>如果底數是 1 或 -1 答案是 1</p>

<p>底數如是其他數值 答案是0，因為 1除以 1以上的2147483648次方，數值接近於0</p>

]]>
      </content:encoded>
      <wp:post_id>1</wp:post_id>
      <wp:post_date>2023-03-17 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-03-17 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>50.Pow 次方解法</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>深度搜索演算法</title>
      <link>http://example.com/深度搜索演算法/</link>
      <pubDate>Sun, 26 Mar 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="演算法">
        <![CDATA[演算法]]>
      </category>
      <guid isPermaLink="false">
jekyll-1-深度搜索演算法      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="深度搜索演算法">深度搜索演算法</h1>
<p>此算法會往最深的路徑一直往下尋找，當抵達目前最大深度並且所在的邊都已經尋找過，<br />
搜索將回朔到上一個節點的所在的邊，繼續往下搜尋直到達到最深處，如此反覆此行直到<br />
全部的行程都確實結束</p>

<p><img src="https://images2.imgbox.com/46/45/IbmHDQ9B_o.jpg?download=true" alt="RUNOOB 图标" /></p>

<p>上圖是使用深度算法跑1、2、3全排列的範例</p>

<p>123 是一個節點，有1、2、3三個邊</p>

<h2 id="路徑一">路徑一</h2>
<p>第一層進入<u>邊1</u>，進入第二層節點<u>邊1</u>，因為<u>邊1</u>已經使用過</p>

<p>換走<u>邊2</u>，進去第三層節點，<u>邊1、2</u>已經使用過，走<u>邊3</u></p>

<p>已到最3層，路徑結束</p>

<h2 id="路徑二">路徑二</h2>
<p>路徑一已經達到第三層，回第二層節點，這個節點目前是到<u>邊2</u>，走<u>邊3</u>，走第三層節點，</p>

<p>此節點<u>邊1</u>已經走過，繼續走<u>邊2</u>，目前已經是第三層，此路徑結束</p>

<h2 id="持續搜索">持續搜索</h2>
<p>持續一樣的步驟，搜尋目前節點可以走的邊，找到之後往下一層節點前進，如果達到第三層就返回上一層節點</p>

<p>從退回的節點搜索下一個可以走的邊，一直重複一樣的步驟直到把所有的路徑走完為止。</p>

]]>
      </content:encoded>
      <wp:post_id>2</wp:post_id>
      <wp:post_date>2023-03-26 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-03-26 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>深度搜索演算法</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向</title>
      <link>http://example.com/物件導向/</link>
      <pubDate>Sat, 08 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-2-物件導向      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向">物件導向</h1>
<p>每一支程式都是在解決某個問題</p>

<p>你不該隨心所欲地去撰寫你的程式，你會陷入泥沼</p>

<p>你該有結構化的思考你想解決問題</p>

<p>當你正確的使用物件，你的程式會更容易閱讀和修改</p>

<h2 id="phone類別圖">Phone類別圖</h2>

<table>
  <thead>
    <tr>
      <th>Phone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>User</td>
    </tr>
    <tr>
      <td>PhoneNumber</td>
    </tr>
    <tr>
      <td>GooleMap()</td>
    </tr>
    <tr>
      <td>UberEat()</td>
    </tr>
    <tr>
      <td>FB()</td>
    </tr>
    <tr>
      <td>Youtube()</td>
    </tr>
    <tr>
      <td>Bank(string passWord)</td>
    </tr>
  </tbody>
</table>

<h2 id="phone的類">Phone的類</h2>
<p>你可以理解這是設計圖<br />
裡面可以定義<strong>屬性</strong>和<strong>方法</strong></p>

<hr />

<p>注意!以下程式碼的陳述式會根據不同程式語言有所差異，但表達的概念是一樣的</p>

<hr />

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">User</span><span class="p">;</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">PhoneNumber</span><span class="p">;</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">GoogleMap</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">UberEat</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">FB</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Youtube</span><span class="p">(</span><span class="kt">string</span> <span class="n">searchName</span><span class="p">){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">Bank</span><span class="p">(</span><span class="kt">string</span> <span class="n">passWord</span><span class="p">){...};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>方法分成有回傳型和無回傳型</p>

<p>靜態語言:<br />
(C#, C++, Java)</p>

<p>無回傳型</p>
<ul>
  <li>return 代表要退出void方法</li>
</ul>

<p>有回傳型</p>
<ul>
  <li>必須設定一個回傳型別如string，以”public string”開頭宣告的方法名，必須回傳一個string值，如return “home”;</li>
  <li>執行完return陳述式後，你可以得到你指定型別的值</li>
</ul>

<p>動態態語言:<br />
(Python, JavaScript)<br />
一樣有回傳型和無回傳型，<u>差別只有不用宣告回傳型別</u>，你想回傳就回傳，比較自由</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#回傳string
</span><span class="k">def</span> <span class="nf">yourFunction1</span><span class="p">:</span>
  <span class="k">return</span> <span class="sh">"</span><span class="s">home</span><span class="sh">"</span>

<span class="c1">#退出方法
</span><span class="k">def</span> <span class="nf">yourFunction2</span><span class="p">:</span>
  <span class="k">return</span>

</code></pre></div></div>

<h2 id="我們都有手機">我們都有手機</h2>

<p>今天有你跟我兩支手機</p>

<table>
  <thead>
    <tr>
      <th>YourPhone</th>
      <th>MyPhone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>User</td>
      <td>User</td>
    </tr>
    <tr>
      <td>PhoneNumber</td>
      <td>PhoneNumber</td>
    </tr>
    <tr>
      <td>GooleMap()</td>
      <td>GooleMap()</td>
    </tr>
    <tr>
      <td>UberEat()</td>
      <td>UberEat()</td>
    </tr>
    <tr>
      <td>FB()</td>
      <td>FB()</td>
    </tr>
    <tr>
      <td>Youtube()</td>
      <td>Youtube()</td>
    </tr>
    <tr>
      <td>Bank(string passWord)</td>
      <td>Bank(string passWord)</td>
    </tr>
  </tbody>
</table>

<p>設計了兩個類別，也可以正常工作</p>

<p>不過你仔細想，我今天跟你說，ChatGPT好厲害，我想加入這個功能，<span style="color:#ff00ff"> 你是不是需要一次改兩個地方 </span></p>

<h2 id="利用物件解決你的問題">利用物件解決你的問題</h2>

<p><img src="https://images2.imgbox.com/38/35/sHFNwquF_o.jpg?download=true" alt="Object1" /></p>

<p>如此，你就不必維護兩份一樣的程式碼了</p>

<h2 id="從類別建立物件稱為類別的實例instance">從類別建立物件，稱為類別的實例(Instance)</h2>

<p><img src="https://images2.imgbox.com/19/f5/UNTUIy0V_o.jpg?download=true" alt="Object2" /></p>

<h2 id="物件的屬性記錄其狀態物件的方法定義其行為">物件的屬性記錄其<u>狀態</u>，物件的方法定義其<u>行為</u></h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">Phone</span> <span class="n">myPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>

<span class="n">yourPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Linda"</span><span class="p">;</span>
<span class="n">myPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Bard"</span><span class="p">;</span>
</code></pre></div></div>

<p>建立兩個實例，兩個不會互相影響</p>

<p>你可以設定他們各自的使用者(屬性)</p>

<h2 id="使用物件的解法">使用物件的解法</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">Phone</span> <span class="n">myPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>

<span class="kt">string</span> <span class="n">yourResult</span> <span class="p">=</span> <span class="n">yourPhone</span><span class="p">.</span><span class="nf">Bank</span><span class="p">(</span><span class="s">"123456"</span><span class="p">);</span>
<span class="kt">string</span> <span class="n">myResult</span> <span class="p">=</span> <span class="n">myPhone</span><span class="p">.</span><span class="nf">Bank</span><span class="p">(</span><span class="s">"pokerSos123"</span><span class="p">);</span>
</code></pre></div></div>

<p>如此，你可以同一份類別維護兩個人的手機，多一個ChatGPT方法，也可以只修改一份設計圖就好</p>

<h2 id="實例化物件並且快速初始化">實例化物件並且快速初始化</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">Phone</span> <span class="n">myPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>

<span class="n">yourPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Linda"</span><span class="p">;</span>
<span class="n">myPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Bard"</span><span class="p">;</span>
</code></pre></div></div>

<p>每次想要使用個物件，初始化欄位的時候，要多key好的鍵盤，特別好<br />
還好，類別可以使用<u>建構式</u>來幫你省很多行程式碼</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">Phone</span> <span class="n">myPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>

<span class="n">yourPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Linda"</span><span class="p">;</span>
<span class="n">myPhone</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="s">"Bard"</span><span class="p">;</span>
</code></pre></div></div>
<p>C#<br />
使用public 類別名稱(參數1, 參數2, …)</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
    <span class="k">public</span> <span class="nf">Phone</span><span class="p">(</span><span class="kt">string</span> <span class="n">user</span><span class="p">){</span>
        <span class="n">User</span> <span class="p">=</span> <span class="n">user</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">User</span><span class="p">;</span>
  
<span class="p">}</span>

<span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">(</span><span class="s">"Linda"</span><span class="p">);</span>
</code></pre></div></div>

<p>python</p>

<p><strong>init</strong>(self, 參數1, 參數2, …)<br />
self 這是自動設定參考到被建立的物件</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
<span class="p">}</span>
<span class="n">yourPhone</span> <span class="o">=</span> <span class="nc">Phone</span><span class="p">(</span><span class="sh">"</span><span class="s">Linda</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>3</wp:post_id>
      <wp:post_date>2023-04-08 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-08 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>46.Permutations and 47. Permutations II</title>
      <link>http://example.com/46.Permutations and 47. Permutations II/</link>
      <pubDate>Tue, 11 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-3-46.Permutations and 47. Permutations II      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="46permutations-and-47-permutations-ii">46.Permutations and 47. Permutations II</h1>

<p>這題目要用深度搜索演算法來解答，可以參考我寫的<a href="/深度搜索演算法">文章</a></p>

<p>如果路徑有五個，我們需要一個一個去探訪，所以必須有一個紀錄的變數</p>

<p><u>需要熟練使用遞迴的技巧</u></p>

<h2 id="紀錄走過的點">紀錄走過的點</h2>

<p>去紀錄我們哪個點有走過，可以使用整數的一維陣列來記錄</p>

<p>[0, 0, 0, 0, 0] 全部都沒走過</p>

<p>[0, 0, 1, 1, 0] 2, 3 被走過</p>

<p>遞迴五次，就可以拿到路徑的答案</p>

<p>不過還有一個問題需要解決</p>

<h2 id="紀錄走的順序">紀錄走的順序</h2>

<p>使用堆疊（stack）, LIFO, Last In First Out） 來處理順序的問題</p>

<p>每遞迴一次就把當前的值加到推疊</p>

<h2 id="走過必留下痕跡">走過必留下痕跡</h2>

<p>哪個時候需要清掉走過的紀錄呢?</p>

<p>必須清掉才能再次獲得新的值，不然就會一直死循環，程式會有bug</p>

<p>遞迴結束的時候就把值給清掉</p>

<p>核心碼如下<br />
Java範例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">book</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
      <span class="k">continue</span><span class="o">;</span>                  <span class="c1">//略過已經走過的點</span>
  <span class="n">book</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>                   <span class="c1">//紀錄走過的點</span>
  <span class="n">tmp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>              <span class="c1">//加入堆疊</span>
  <span class="n">dfs46</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">tmp</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">book</span><span class="o">);</span>   <span class="c1">//遞迴的方法</span>
  <span class="n">tmp</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>      <span class="c1">//清除堆疊的最後一個</span>
  <span class="n">book</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                   <span class="c1">//清除一維陣列的紀錄</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="遞迴停止的時間點">遞迴停止的時間點</h2>

<p>遞迴結束的時候需要去清除目前這個巡迴的值</p>

<p>這邊停止的點是</p>

<p><u>當堆疊的數量等於數組的長度的時候</u></p>

<p>這邊的例子是等於5</p>

<h2 id="47題permutations-ii的不同之處">47題Permutations II的不同之處</h2>

<p>做法是一樣的，所以我放在一起</p>

<p>就是要思考為什麼需要特別拿來做不同的題型</p>

<p>根據題意</p>

<p>46題是給不會重複的陣列<br />
47題是給會重複的陣列</p>

<p>陣列重複會造成什麼後果</p>

<p>[1, 2, 3]  <br />
[1, 2, 3] 、 [1, 3, 2] 、 [2, 1, 3] 、 [2, 3, 1]</p>

<p>以上發現不果我怎麼排，只要是數組不重複，我都可以得到一組全新的數組</p>

<p>[1, 1, 2]  <br />
[1, 1, 2] 、 [1, 2, 1] 、 [1, 1, 2] 、 [1, 2, 1]</p>

<p>用一樣的排法在重複的陣列，會得到重複的解答</p>

<h2 id="去除重複">去除重複</h2>

<p><img src="https://images2.imgbox.com/06/46/0VuRiBuo_o.jpg?download=true" alt="差異" /></p>

<p>紅色的數字代表紀錄有無走過，並且給一個數字方知道給值的順序</p>

<table>
  <thead>
    <tr>
      <th>變數</th>
      <th>值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>i</td>
      <td>陣列的索引</td>
    </tr>
    <tr>
      <td>nums</td>
      <td>數組</td>
    </tr>
    <tr>
      <td>book</td>
      <td>紀錄的一維陣列</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>去重一要兩個值互比，所以 i &gt; 0</li>
  <li>仔細看上面的圖，nums[i-1] 等於 nums[i] 並且 book[i-1] 一定是1，因為這樣可以<br />
保證執行的順序，只要保證是從前往後找，就不會有重複的問題</li>
  <li>[1, 2, 1] 這種數組就會有問題，因為我們的算法是 i 跟 i-1 的比較，本來以為算完了<br />
但後面其實還有，不過只要排序數組就可以解結問題了，變成[1, 1, 2]</li>
</ol>

]]>
      </content:encoded>
      <wp:post_id>4</wp:post_id>
      <wp:post_date>2023-04-11 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-11 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>46.Permutations and 47. Permutations II</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向-封裝</title>
      <link>http://example.com/物件導向-封裝/</link>
      <pubDate>Sun, 16 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-4-物件導向-封裝      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向-封裝">物件導向-封裝</h1>

<p>介紹這主題之前，歡迎先看我寫的<a href="/物件導向">物件導向的文章</a></p>

<h2 id="從軍報國">從軍報國</h2>

<p>當兵進去軍營，手機都會被收走</p>

<table>
  <thead>
    <tr>
      <th>Phone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>User</td>
    </tr>
    <tr>
      <td>PhoneNumber</td>
    </tr>
    <tr>
      <td>GooleMap()</td>
    </tr>
    <tr>
      <td>UberEat()</td>
    </tr>
    <tr>
      <td>FB()</td>
    </tr>
    <tr>
      <td>Youtube()</td>
    </tr>
    <tr>
      <td>Bank(string passWord)</td>
    </tr>
  </tbody>
</table>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">User</span><span class="p">;</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">PhoneNumber</span><span class="p">;</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">GoogleMap</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">UberEat</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">FB</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Youtube</span><span class="p">(</span><span class="kt">string</span> <span class="n">searchName</span><span class="p">){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">Bank</span><span class="p">(</span><span class="kt">string</span> <span class="n">passWord</span><span class="p">){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">On</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="nf">Off</span><span class="p">(){...};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>你一定不會希望長官可以隨意使用你的手機</p>

<p>但我們的設計，長官想做什麼都可以，他可以輕易地使用你的手機，如FB</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">yourPhone</span><span class="p">.</span><span class="nf">FB</span><span class="p">();</span>
</code></pre></div></div>
<p>還好，你可以使用私有的技術，這是使用物件很有效的技巧</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
  <span class="p">...</span>
  <span class="k">private</span> <span class="k">void</span> <span class="nf">FB</span><span class="p">(){...};</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Phone</span> <span class="n">yourPhone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Phone</span><span class="p">();</span>
<span class="n">yourPhone</span><span class="p">.</span><span class="nf">FB</span><span class="p">();</span>   <span class="c1">//這一行就會無法執行</span>
</code></pre></div></div>
<blockquote>
  <p>長官甚至不知道你有FB這一個方法</p>
</blockquote>

<h2 id="封裝表示讓某些資料私有化">封裝表示讓某些資料私有化</h2>

<p><strong>public</strong> 表示資料是公共的，權限是開放的，物件內物件外都可以被存取<br />
<strong>private</strong> 表示資料是私有的，該欄位只能在該物件內部從取</p>

<p>當你讓資料私有化，再撰寫一些公用的程式碼，就叫做封裝<br />
以我們這邊的例子</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
  <span class="sc">'''</span>
  <span class="k">private</span> <span class="k">void</span> <span class="nf">FB</span><span class="p">(){...};</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">RunFB</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">passWord</span><span class="p">){...};</span>
  <span class="sc">'''</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="私有資料沒有公用方法可以存取">私有資料沒有公用方法可以存取</h2>

<p>你就無法從外部存取該資料，想要存取某個私有資料，必須有公用方法<br />
存取所需的資料。你把資料封裝就表示，你給他一個合理的方法存取或執行<br />
某些公用方法，但是不會讓它們干擾所依賴的資料。</p>

<p>例如密碼，宣告成private比較合理</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">public</span> <span class="k">void</span> <span class="nf">RunFB</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">passWord</span><span class="p">){...};</span>
</code></pre></div></div>
<p>我們可以開放讓外部使用RunFB方法，但不接受外部修改FB的密碼</p>

<h2 id="什麼情形會想要宣告為私有的">什麼情形會想要宣告為私有的</h2>

<p>物件在運行的時候會記錄一下必要資訊，而且不需要給外不知道的資料。<br />
以現實來說，每天使用的手機，我們應該都很熟才對，</p>

<p>例如它會有一個私有變數去紀錄目前的Android或ios是什麼版號，運行的時候<br />
手機需要知道，但我們使用者不需要知道，我們需要知道的是如螢幕的亮度。</p>

<h2 id="封裝的好處">封裝的好處</h2>

<ul>
  <li>容易使用
    <ul>
      <li>當你的類別有私有變數的時候，智能代碼補全(intellisense)就不會被顯示出來，<br />
因為這些欄位或方法不會被外部所使用</li>
    </ul>
  </li>
  <li>容易維護
    <ul>
      <li>有時候，一些公有欄位或變數，會因為你直接存取或者本不應該開放給外部，程式<br />
有可能會碰上你不預期的狀況，會成成<br />
Bug，所以加入私有會讓你的程式更容易維護</li>
    </ul>
  </li>
  <li>更有彈性
    <ul>
      <li>封裝代表是整理程式的一種方法，當你程式有規劃不是一盤散沙，當這個程式需要<br />
被修改的時候，你可以更容易對它進行修改，更省時間。</li>
    </ul>
  </li>
</ul>

<h2 id="現實上的封裝">現實上的封裝</h2>

<p>電風扇的轉速有快、中、慢三個按鈕，你只需要按下某一按鈕，它就會給你應有的轉速，<br />
你不會想要自己的去控制它的電壓，讓它變成你想要的轉速，這樣子太累。今天，廠商<br />
都會幫電風扇封裝好，讓我們更方便的使用而且不容易出錯。</p>

<p>而且，你也更容易維護，因為被你封裝起來了，假如今天你想要改快快的轉速，清晰的程式碼<br />
會幫助你重新利用它。</p>

<h2 id="關於封裝的想法">關於封裝的想法</h2>

<ul>
  <li>全部都是public
    <ul>
      <li>剛開始撰寫程式時可能免強記得住，當變數變多時也是容易讓人混亂，還有經過時間的<br />
推移，自己都不知道還記得多少，更何況如果有其他人要用到你的類別呢?</li>
    </ul>
  </li>
  <li>有必要時間才宣告為public
    <ul>
      <li>當你全部的程式都是public，會沒有分類的感覺，你有辦法在沒分類的房間內找到你想<br />
找到的東西嗎?思考一下什麼適合private，甚麼適合public，當下多花一點時間，一定<br />
能在未來省下更多時間</li>
    </ul>
  </li>
</ul>

]]>
      </content:encoded>
      <wp:post_id>5</wp:post_id>
      <wp:post_date>2023-04-16 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-16 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向-封裝</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>Int與Byte互轉</title>
      <link>http://example.com/Int與Byte互轉/</link>
      <pubDate>Tue, 18 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="演算法">
        <![CDATA[演算法]]>
      </category>
      <guid isPermaLink="false">
jekyll-5-Int與Byte互轉      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="int與byte互轉">Int與Byte互轉</h1>

<h2 id="結構">結構</h2>

<p>一個Int等於4Byte，一個Byte等於8個Bit</p>

<h2 id="10的寫法">10的寫法</h2>

<table>
  <thead>
    <tr>
      <th>7</th>
      <th>6</th>
      <th>5</th>
      <th>4</th>
      <th>3</th>
      <th>2</th>
      <th>1</th>
      <th>0</th>
      <th>進位</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>10</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<h2 id="位元的排列">位元的排列</h2>

<p>左邊的稱為高位元</p>

<p>右邊的稱為低位元</p>

<p>記成左邊的數子比較大，如我們常用的十進位就知道，越左邊<br />
位數越大</p>

<h2 id="思考如何轉換">思考如何轉換</h2>

<table>
  <thead>
    <tr>
      <th>8</th>
      <th>7</th>
      <th>6</th>
      <th>5</th>
      <th>4</th>
      <th>3</th>
      <th>2</th>
      <th>1</th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>一個byte最大值是255</p>

<p>如果今天數字是大於255，如256要如何用byte表示呢</p>

<p>256用一個byte肯定是接不了，至少要兩個比較合理</p>

<p>這邊要對256取餘數，為什麼是256不是255</p>

<p>上面的表顯示的256的位元狀態，前面八個bit代表一個byte</p>

<p>當你對256取餘數就可以取得0~7bit(一個byte)的值</p>

<p>然後再右移八位就可以繼續對256取餘數</p>

<p>直到int小於等於0的時候就停止</p>

<p>用可變長度的資料結構去儲存資料是滿好用的方法，如隊列(queue)</p>

<h2 id="使用隊列來處理int-to-byte">使用隊列來處理int to byte</h2>

<p>256對256取餘數是0，0加入對列，256要右移8(就是把高位元往低位元移動8)，256變成1<br />
1對256取餘數是1，1加入對列，1要右移8，1變成0</p>

<p><img src="https://images2.imgbox.com/f7/33/kQi57CDo_o.jpg?download=true" alt="queue" /></p>

<h2 id="使用隊列來處理byte-to-int">使用隊列來處理byte to int</h2>

<p>現在對列是[0, 1] 要如何轉回256</p>

<p>int to byte是右移，這邊就是要左移了</p>

<p>左移的位數從0開始，每位移完一次就+8，直到把全部的對列執行完為止</p>

<p>範例程式</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">exp</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
  <span class="n">result</span> <span class="o">+=</span> <span class="n">v</span> <span class="o">&lt;&lt;</span> <span class="n">exp</span>
  <span class="n">exp</span> <span class="o">+=</span> <span class="mi">8</span>
<span class="k">return</span> <span class="n">result</span>

</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>6</wp:post_id>
      <wp:post_date>2023-04-18 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-18 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>Int與Byte互轉</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向-繼承</title>
      <link>http://example.com/物件導向-繼承/</link>
      <pubDate>Wed, 19 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-6-物件導向-繼承      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向-繼承">物件導向-繼承</h1>

<table>
  <thead>
    <tr>
      <th>TaiwanPhone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>User</td>
    </tr>
    <tr>
      <td>PhoneNumber</td>
    </tr>
    <tr>
      <td>GooleMap()</td>
    </tr>
    <tr>
      <td>UberEat()</td>
    </tr>
    <tr>
      <td>FB()</td>
    </tr>
    <tr>
      <td>Youtube()</td>
    </tr>
    <tr>
      <td>Bank(string passWord)</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>ChinaPhone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>PhoneNumber</td>
    </tr>
    <tr>
      <td>BaiduMap()</td>
    </tr>
    <tr>
      <td>BiliBili()</td>
    </tr>
    <tr>
      <td>Bank(string passWord)</td>
    </tr>
  </tbody>
</table>

<p>業務增加，手機要賣向中國，設計了一個新的大陸手機的類別</p>

<p>然後不幸的是，我們跟中國的電話號碼格式不一樣</p>

<p>想要加入一個方法去處理這個問題，但是要兩邊都加嗎?有一點沒效率又難維護</p>

<p><strong>讓相同的程式反覆出現在不同的類別沒效率又容易出錯，這時候可以時候繼承</strong></p>

<h2 id="phone類別使用繼承解決重複問題">Phone類別使用繼承，解決重複問題</h2>

<p>TaiwanPhone和ChinaPhone有許多相似的程式碼，因為現實世界也是這樣子，有很多相似的地方</p>

<p>比較一般化的類別，稱為基礎類別。較為特殊化的類別稱為子類別，可以繼承基礎類別</p>

<p><img src="https://images2.imgbox.com/57/b0/Qenn1pRd_o.jpg?download=true" alt="繼承" /></p>

<p><img src="https://images2.imgbox.com/27/b9/A2zPLIzG_o.jpg?download=true" alt="繼承2" /></p>

<h2 id="真實世界的行為很複雜">真實世界的行為很複雜</h2>

<p>每台手機都可以開機關機，但開機的時地狀況不太一樣，美台手機都會顯示自家廠牌的Logo<br />
，程式碼肯定會與基礎類別不一樣，這個時候子類別就可以改改寫所繼承的程式碼，稱之為<br />
<strong>覆寫</strong></p>

<p><img src="https://images2.imgbox.com/58/b8/eMCqZLxM_o.jpg?download=true" alt="繼承3" /></p>

<p>從基礎類別繼承來的方法，不代表子類別要用同樣的方法去使用它</p>

<h2 id="現實的分組其實更複雜">現實的分組其實更複雜</h2>

<p><img src="https://images2.imgbox.com/f0/71/IWM5z64m_o.jpg?download=true" alt="繼承4" /></p>

<p>頂層的基礎類別，下面會有一蠍子類別，這些子類別也會有一些子類別繼承他們，這不只可以<br />
避免很多重複的程式碼，也會讓你更好維護與閱讀你的程式</p>

<h2 id="子類別可以為自己擴充">子類別可以為自己擴充</h2>
<p>子類別並不是只能繼承來自基礎類別的欄位與方法，也能增加自己的欄位與方法<br />
如IOS有Airdrop功能，不是全部的智能手機都有這個功能</p>

<h2 id="繼承的語法">繼承的語法</h2>
<p>示範幾個語言的寫法<br />
C#<br />
使用冒號</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SubClass</span> <span class="p">:</span> <span class="n">BaseClass</span>
</code></pre></div></div>
<p>Python<br />
使用括弧</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">)</span>
</code></pre></div></div>
<p>Java<br />
使用關鍵字extends</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SubClass</span> <span class="kd">extends</span> <span class="nc">BaseClass</span>
</code></pre></div></div>

<h2 id="子類別可以覆寫基礎方法">子類別可以覆寫基礎方法</h2>

<p>private方法不能覆寫，若基礎類別有的方法，在子類別也被定義，這兩個方法是互相<br />
不相干的，同名稱也是一樣。</p>

<p>關於類別欄位的部分，只要有同名，基礎類別的欄位會被隱藏起來</p>

<p>列出不同語法的差異</p>

<p>C#<br />
基礎類別使用virtual關鍵字<br />
子類別使用override關鍵字</p>

<p>有一個很酷的東西，當你沒使用virtual或override關鍵字<br />
但是又同名，此時你的方法會被遮蔽，程式就會呼叫基礎類別的方法<br />
並且給出警告，這時候你可以給 new 關鍵字告訴編譯器你就是要遮蔽</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">{</span>
  <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Go</span><span class="p">(){</span>
    <span class="c1">//code</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">SubClass</span> <span class="p">:</span> <span class="n">BaseClass</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Go</span><span class="p">(){</span>
    <span class="c1">//code</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Java<br />
不需要關鍵字，名稱一樣即可<br />
@Override 註解(annotation)<br />
這是要告訴編譯器你要覆寫，請它幫你檢查有無撰寫錯誤</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BaseClass</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Go</span><span class="o">(){</span>
    <span class="c1">//code</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubClass</span> <span class="kd">extends</span> <span class="nc">BaseClass</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Go</span><span class="o">(){</span>
    <span class="c1">//code</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Python<br />
不需要關鍵字，名稱一樣即可</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">Go</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Go in Base</span><span class="sh">'</span><span class="p">)</span>  
<span class="p">}</span>
<span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">Go</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Go in Sub</span><span class="sh">'</span><span class="p">)</span>  
<span class="p">}</span>
</code></pre></div></div>

<h2 id="子類別可以存取它的基礎類別">子類別可以存取它的基礎類別</h2>

<p>覆寫基礎類別後，有時候你還是會想要使用本來的程式碼，<br />
使用每個語言特定的關鍵字你可以存取基礎類別的任何方法</p>

<p>使用這個技巧不只可以少打程式碼，最重要的是你可以改一個地方就好，<br />
如果要兩個地方都改成一樣的程式碼是很容易忘記的</p>

<p>以Java為例子，關鍵字是super</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BaseClass</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"Base"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Go</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Go to train"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubClass</span> <span class="kd">extends</span> <span class="nc">BaseClass</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"Base"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Go</span><span class="o">(){</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">Go</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Go to Taipei"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>python的關鍵字是super()</p>

<p>C#的關鍵字是base</p>

<h2 id="當基礎類別有建構子時">當基礎類別有建構子時</h2>

<p>有繼承關係的話，會先執行基礎類別的建構式然後執行子類別的</p>

<p>C#<br />
強制子類別也要有建構式<br />
語法是 : base(參數,…) 加在建構式語法後面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">BaseClass</span><span class="p">(</span><span class="kt">string</span> <span class="n">iname</span><span class="p">){</span>
        <span class="n">name</span> <span class="p">=</span> <span class="n">iname</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">SubClass</span> <span class="p">:</span> <span class="n">BaseClass</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">SubClass</span><span class="p">(</span><span class="kt">string</span> <span class="n">iname</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">iname</span><span class="p">){</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>python<br />
不強制子類別也要有建構式<br />
語法是原本的語法基礎上加上<br />
super().<strong>init</strong>(參數)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
<span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># super().__init__(name)
</span>        <span class="k">pass</span>
</code></pre></div></div>
<p>java<br />
強制子類別也要有建構式<br />
語法是 super(參數,..)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BaseClass</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"Base"</span><span class="o">;</span>
    <span class="nc">BaseClass</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SubClass</span> <span class="kd">extends</span> <span class="nc">BaseClass</span><span class="o">{</span>
    <span class="nc">SubClass</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
 
<span class="o">}</span>
</code></pre></div></div>
<h2 id="基礎類別可以使用子類別代替">基礎類別可以使用子類別代替</h2>

<p>有一個基礎類別叫手機，它的類別是蘋果手機</p>

<p>有一位回收商人要收手機，你就可以把蘋果手機給他，因為蘋果手機是手機的一種</p>

<p>如果這位商人要收蘋果手機，你就不可以把全部的手機給他，因為不是全部的手機都是蘋果手機</p>

<p>這有相關的原則里氏替代原則</p>

<p>對於靜態與動態語言雖然處理上不一樣，但你要懂這原理並活用</p>

]]>
      </content:encoded>
      <wp:post_id>7</wp:post_id>
      <wp:post_date>2023-04-19 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-19 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向-繼承</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向-介面</title>
      <link>http://example.com/物件導向-介面/</link>
      <pubDate>Wed, 26 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-7-物件導向-介面      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向-介面">物件導向-介面</h1>

<h2 id="介面要求類別實作全部的方法">介面要求類別實作全部的方法</h2>

<p><img src="https://images2.imgbox.com/55/0b/zBQBvSzj_o.jpg?download=true" alt="繼承" /></p>

<p>今天我們有一個外拍任務，需要有pro或max的相機規格</p>

<p>準備一個使用者的類別</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
    <span class="k">public</span> <span class="nf">Phone</span><span class="p">(</span><span class="kt">string</span> <span class="n">user</span><span class="p">){</span>
        <span class="n">User</span> <span class="p">=</span> <span class="n">user</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">User</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">IPhoneXPro</span> <span class="p">:</span> <span class="n">Phone</span><span class="p">{</span>
    <span class="k">public</span> <span class="nf">IPhoneXPro</span><span class="p">(</span><span class="kt">string</span> <span class="n">user</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">user</span><span class="p">){}</span>

<span class="p">}</span>
<span class="k">class</span> <span class="nc">User</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">TakePhotoByPro</span><span class="p">(</span><span class="n">IPhoneXPro</span> <span class="n">phone</span><span class="p">){</span>
        <span class="nf">DoSomething</span><span class="p">();</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">TakePhotoByMax</span><span class="p">(</span><span class="n">IPhoneXMax</span> <span class="n">phone</span><span class="p">){</span>
        <span class="nf">DoSomething</span><span class="p">();</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
    <span class="p">}</span>
    <span class="k">private</span> <span class="k">void</span> <span class="nf">DoSomething</span><span class="p">(){</span>
        <span class="c1">// code</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>
<p>拍照要做的事情都一樣，唯一不同就是參數  <br />
IPhoneXPro 和 IPhoneXMax  <br />
這樣的寫法維護性會很低，兩邊都要改  <br />
思考一下，有ProMax是不是最好了，全都要</p>

<p><strong>別擔心，我們能透過介面來解決這個難題!!!</strong></p>

<h2 id="介面的組成">介面的組成</h2>

<p>增加介面跟類別是很像的</p>

<ol>
  <li>使用關鍵字不同</li>
  <li>不能存欄位，但靜態變數是可以的</li>
  <li>public的介面，裡面的任何東西都會自動變成public</li>
  <li>可以增加方法，不過不能實作</li>
</ol>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IIPhoneXPro</span><span class="p">{</span>
  <span class="k">void</span> <span class="nf">ProCamera</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">TakePhotoByPro</span><span class="p">(</span><span class="n">IIPhoneXPro</span> <span class="n">phone</span><span class="p">){</span>
        <span class="nf">DoSomething</span><span class="p">();</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
        <span class="sc">'''</span><span class="err">'</span>
    <span class="p">}</span>
    <span class="c1">// code</span>

<span class="p">}</span>
</code></pre></div></div>
<p>如此，就可以接收有實作IIPhoneXPro的物件作為參數了，很棒  <br />
實作IIPhoneXPro這個介面必須有ProCamer的方法</p>

<h2 id="重新思考一次promax我們全都要">重新思考一次ProMax，我們全都要</h2>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Phone</span><span class="p">{</span>
    <span class="k">public</span> <span class="nf">Phone</span><span class="p">(</span><span class="kt">string</span> <span class="n">user</span><span class="p">){</span>
        <span class="n">User</span> <span class="p">=</span> <span class="n">user</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">User</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">interface</span> <span class="nc">IIPhoneXPro</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">ProCamera</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">interface</span> <span class="nc">IIPhoneXMax</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">MaxCamera</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">IPhoneXProMax</span> <span class="p">:</span> <span class="n">Phone</span><span class="p">,</span> <span class="n">IIPhoneXPro</span><span class="p">,</span> <span class="n">IIPhoneXMax</span><span class="p">{</span>
    <span class="k">public</span> <span class="nf">IPhoneXProMax</span><span class="p">(</span><span class="kt">string</span> <span class="n">user</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">user</span><span class="p">){}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">ProCamera</span><span class="p">(){</span>
        <span class="c1">// code</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">MaxCamera</span><span class="p">(){</span>
        <span class="c1">// code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>把本來兩個繼承Phone的子類別IPhoneXPro和IPhoneXMax的類別刪除掉  <br />
換成一個類別並且去實作它們的介面</p>

<p>你可能會想說，這樣跟我準備3個類別去繼承Phone有什麼差別  <br />
差最多是彈性</p>

<p>類別的繼承負擔比較大，會繼承到方法欄位，而且類別的型態也只有一個</p>

<p>介面的話，跟特別的方法相關，可以不依靠繼承讓某個類別跟相關的方法相關  <br />
而且會帶有其介面的類，會有比較多型態</p>

<p>例如，現在的手機可以玩遊戲，以前的人想像的到嗎&gt;今天如果用介面  <br />
可以多一個玩遊戲的方法，就可以達成</p>

<h2 id="介面是一個契約">介面是一個契約</h2>
<p>介面裡面的方法沒有實做  <br />
當類別去實作介面時(兩個間會有關係)  <br />
當類別沒有完全實作介面裡面的方法時，編譯會失敗  <br />
當類別確實實作所有的方法時，旅途才可以繼續</p>

<h2 id="介面不可以實例化但是可以參考它">介面不可以實例化，但是可以參考它</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IIPhoneXMax</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">MaxCamera</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">IIPhoneXMax</span> <span class="n">phone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">IIPhoneXMax</span><span class="p">();</span>
</code></pre></div></div>
<p>去實例化，會發生錯誤</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IIPhoneXPro</span> <span class="n">phone</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">IPhoneXProMax</span><span class="p">(</span><span class="s">"Jack"</span><span class="p">);</span>
</code></pre></div></div>
<p>這一行的意思是  <br />
phone 將會指向IPhoneXProMax 所實例化的物件</p>

<p>只要類別有實作某些界面，都可以用這些介面的變數去接收參考</p>

<h2 id="介面可以繼承其他介面">介面可以繼承其他介面</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IIPhoneXPro</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">ProCamera</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">interface</span> <span class="nc">IIPhoneXMax</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">MaxCamera</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">interface</span> <span class="nc">IIPhoneXProMax</span><span class="p">:</span> <span class="n">IIPhoneXMax</span><span class="p">,</span> <span class="n">IIPhoneXPro</span><span class="p">{</span>
    <span class="k">void</span> <span class="nf">UltraCamera</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">IPhoneXProMax</span> <span class="p">:</span> <span class="n">Phone</span><span class="p">,</span> <span class="n">IIPhoneXProMax</span><span class="p">{</span>
  <span class="sc">'''</span><span class="err">'</span>
<span class="p">}</span>
</code></pre></div></div>
<p>這個時候IPhoneXProMax就不能只有實作UltraCamera方法而已</p>

<p>必須實作ProCamera、MaxCamera、UltraCamera三個方法才是正確的</p>

<h2 id="介面與物件都可以向上轉型與向下轉型">介面與物件都可以向上轉型與向下轉型</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Life</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">Breath</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Human</span>  <span class="kd">implements</span> <span class="nc">Life</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Breath</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kt">void</span> <span class="nf">Walk</span><span class="o">(){}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>假設所有生命都會呼吸，人類實作生命，人可以呼吸，自帶一個可以走路的方法  <br />
但是不是所有的生命都可以走路</p>

<p>向上轉型意思就是人類-&gt;生命<br />
程式碼表示</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Human</span> <span class="n">people1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">();</span>

<span class="nc">Life</span> <span class="n">people2</span> <span class="o">=</span> <span class="n">people1</span><span class="o">;</span>

<span class="n">people2</span><span class="o">.</span><span class="na">Breath</span><span class="o">();</span> <span class="c1">//正確</span>

<span class="n">people2</span><span class="o">.</span><span class="na">Walk</span><span class="o">();</span>  <span class="c1">//不正確</span>
</code></pre></div></div>

<p>向下轉型就是生命-&gt;人類</p>

<p>要轉型前可以檢查兩個物件是不是有關係的  <br />
向上轉型編譯器都會先檢查，不是相關的類別編譯就會錯誤  <br />
向下轉型就是執行階段去檢查了，所以要多多注意</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Human</span> <span class="nc">NewPeople</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">people2</span> <span class="k">instanceof</span> <span class="nc">Human</span><span class="o">){</span>
  <span class="nc">NewPeople</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Human</span><span class="o">)</span> <span class="n">people2</span><span class="o">;</span>
<span class="o">}</span>
<span class="nc">NewPeople</span><span class="o">.</span><span class="na">Breath</span><span class="o">();</span> <span class="c1">//正確</span>

<span class="nc">NewPeople</span><span class="o">.</span><span class="na">Walk</span><span class="o">();</span>  <span class="c1">//正確</span>

</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>8</wp:post_id>
      <wp:post_date>2023-04-26 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-26 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向-介面</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向-多型</title>
      <link>http://example.com/物件導向-多型/</link>
      <pubDate>Thu, 27 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-8-物件導向-多型      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向-多型">物件導向-多型</h1>

<p>當你的類別有繼承關係，不管是類別或是介面</p>

<p>這些型態就是所謂的多種形態</p>

<p>但這些型態有時候需要一些轉換</p>

<p>思考一下什麼時候會需要轉換</p>

<p>EX</p>

<p>今天我去一個Party，認識到好多人，想要加一下電話</p>

<p>於是準備了一個方法來接收大家的電話</p>

<p>第一位是美女小艾蘋果手機</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">GetPhoneNumber</span><span class="p">(</span><span class="n">Apple</span> <span class="n">phone</span><span class="p">){</span>

<span class="p">}</span>
</code></pre></div></div>
<p>第二位是帥哥小艾索尼手機</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">GetPhoneNumber</span><span class="p">(</span><span class="n">Sony</span> <span class="n">phone</span><span class="p">){</span>

<span class="p">}</span>
</code></pre></div></div>

<p>這是一場災難</p>

<p>把Phone作為這些手機的基礎類別，其他為子類別<br />
然後把方法改為基礎類別，這就稱為向上轉型<br />
也稱為多型</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">GetPhoneNumber</span><span class="p">(</span><span class="n">Phone</span> <span class="n">phone</span><span class="p">){</span>

<span class="p">}</span>
</code></pre></div></div>

<p>既然有向上就有向下</p>

<p>思考什麼時候會需要用到向下</p>

<p>例如你現在有收集到所有的手機，並且登記完電話了</p>

<p>然後要還給對方，並且告訴他他手機該有的型別是正常的</p>

<p>如果沒轉換回去將會失去原本該類別的欄位與方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Phone</span><span class="o">[]</span> <span class="n">phones</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Phone</span><span class="o">[]{.....};</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kk</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
  <span class="k">if</span><span class="o">(</span><span class="n">phones</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="k">instanceof</span> <span class="nc">Sony</span><span class="o">){</span>
    <span class="nc">GiveBack</span><span class="o">((</span><span class="nc">Sony</span><span class="o">)</span><span class="n">phones</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kt">void</span> <span class="nf">GiveBack</span><span class="o">(</span><span class="nc">Sony</span> <span class="n">h</span><span class="o">){</span>
    <span class="sc">'''</span><span class="err">'</span>
<span class="o">}</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>9</wp:post_id>
      <wp:post_date>2023-04-27 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-27 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向-多型</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>物件導向-抽象類別</title>
      <link>http://example.com/物件導向-抽象類別/</link>
      <pubDate>Thu, 27 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-9-物件導向-抽象類別      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="物件導向-抽象類別">物件導向-抽象類別</h1>

<h2 id="有時候類別是一個概念">有時候類別是一個概念</h2>

<p>以前的人有四種職業，士、農、工、商</p>

<p>所以要設計四種類別，而且有一個共通之處，它們都是職業</p>

<p>所以再設計一個基礎類別會合理一點</p>

<p>不過對我們來說，職業這個類別不需要實體化</p>

<p>因為現實中的職業一定在這士、農、工、商裡面</p>

<h2 id="抽象類別是類別與概念的混合體">抽象類別是類別與概念的混合體</h2>

<ol>
  <li>跟類別一樣，你可以宣告欄位與方法，也可以實作方法</li>
  <li>跟介面一樣，你也可以定義一些方法並且不實作，給繼承的<br />
類別或介面一個契約</li>
  <li>但是不可以實體化，如同前面所述，他是一個概念</li>
</ol>

<h2 id="如何不讓類別實例化">如何不讓類別實例化</h2>

<p>這邊根據程式語言不同，會有些許不一樣</p>

<p>C# and Java 在class前面加一個abstract</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Job</span><span class="p">{</span>
 
<span class="p">}</span>
</code></pre></div></div>

<p>python 因為沒有抽象類別<br />
可以使用 abc 套件輔助</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">abc</span>
<span class="k">class</span> <span class="nc">Job</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="p">.</span><span class="n">ABCMeta</span><span class="p">):</span>
  <span class="c1"># code 
</span></code></pre></div></div>

<h2 id="抽象方法沒有實作">抽象方法沒有實作</h2>
<p>抽象方法不可以實作，推回來，可以發現介面的方法都是抽象方法<br />
但是如何在抽象類別加入抽象方法呢<br />
根據語言不同也會些許不一樣</p>

<p>C# and Java 在方法型態前面加一個abstract</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Job</span><span class="p">{</span>
  <span class="k">abstract</span> <span class="k">void</span> <span class="nf">Do</span><span class="p">(){}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>python 在方法上面加入@abc.abstractmethod修飾語</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">abc</span>
<span class="k">class</span> <span class="nc">Job</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="p">.</span><span class="n">ABCMeta</span><span class="p">):</span>
    <span class="nd">@abc.abstractmethod</span>
    <span class="k">def</span> <span class="nf">Do</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">NotImplemented</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>10</wp:post_id>
      <wp:post_date>2023-04-27 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-27 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>物件導向-抽象類別</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>python的繼承</title>
      <link>http://example.com/python的繼承/</link>
      <pubDate>Fri, 28 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="python">
        <![CDATA[python]]>
      </category>
      <guid isPermaLink="false">
jekyll-10-python的繼承      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="python的繼承">python的繼承</h1>

<h2 id="object類別">Object類別</h2>
<p>Python中的所以類別都是來自object類別</p>

<p>如果是你自己的定義的類別，沒特別定義的話，也會</p>

<p>預設基礎類別是object類別</p>

<p>object類別有幾個方法滿重要提出來討論</p>

<ol>
  <li>__new__<br />
一個物件被建立這一個方法是第一個執行的，然後會立刻執行__init__</li>
</ol>

<p>所以很容易讓人誤會，以為是__init__先執行</p>

<p>這邊個人覺得當你想要獨體模式的時候這邊是很重要的</p>

<ol>
  <li>
    <p>__init__<br />
一般用來初始化實例化物件的地方</p>
  </li>
  <li>
    <p>__str__<br />
這個方法用來回傳此物件的描述字串</p>
  </li>
</ol>

<p>如果是python自帶的基礎型別，會有自帶的描述</p>

<p>如果是自訂類別，預設是物件名稱與記憶體位置</p>

<p>如: &lt;<strong>main</strong>.BaseClass object at 0x000002018F4995E0&gt;</p>

<p>需要覆寫才會有你想要的描述</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
  <span class="k">return</span> <span class="sh">"</span><span class="s">your description</span><span class="sh">"</span>
</code></pre></div></div>
<ol>
  <li>__eq__<br />
這個等於  == 運算子，如果你沒覆寫這個方法，那它的比對將會非常嚴格</li>
</ol>

<p>只有自己跟自己比才會True</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
  
<span class="n">a</span> <span class="o">=</span> <span class="nc">BaseClass</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">BaseClass</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">)</span>   <span class="c1">#False
</span></code></pre></div></div>
<p>當你需要用物件進行比較 == 時，建議覆寫這個方法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
  <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">__value</span><span class="p">:</span> <span class="nb">object</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
      <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">__value</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">):</span>
          <span class="k">return</span> <span class="bp">False</span>
      <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="n">__value</span><span class="p">.</span><span class="n">name</span><span class="p">:</span>
          <span class="k">return</span> <span class="bp">False</span>
      <span class="k">return</span> <span class="bp">True</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">BaseClass</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">BaseClass</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">)</span>  <span class="c1">#True
</span></code></pre></div></div>

<h2 id="動態連結">動態連結</h2>
<p>當類別有繼承關係的時候，當你呼叫物件的方法實</p>

<p>python會在執行階段去決定要呼叫類別的哪一個方法</p>

<p>此稱為動態連結</p>

<p>B是A的子類別，C是B的子類別，那A就是最一般化的類別</p>

<p>A還會是object的子類別</p>

<p>如果在C類別的物件呼叫Find方法，python會按照C-&gt;B-&gt;A-&gt;object</p>

<p>的方向尋找，直到找到實作該方法的類別之後，搜索動作才會停止</p>

]]>
      </content:encoded>
      <wp:post_id>11</wp:post_id>
      <wp:post_date>2023-04-28 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-28 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>python的繼承</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>spring boot-基礎操作</title>
      <link>http://example.com/spring boot-基礎操作/</link>
      <pubDate>Sun, 30 Apr 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="spring boot">
        <![CDATA[spring boot]]>
      </category>
      <guid isPermaLink="false">
jekyll-11-spring boot-基礎操作      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="spring-boot-基礎操作">spring boot-基礎操作</h1>

<h2 id="mvc">MVC</h2>
<p>Spring boot 也有MVC的架構<br />
簡單來說就是將資料、處理資料的流程、視覺三方的關注點分開<br />
讓彼此間的關係程度分開一些</p>

<h2 id="spring-ioc">spring ioc</h2>
<p>spring ioc控制反轉容器，這是一轉設計模式，可以參考<a href="https://zh.wikipedia.org/zh-tw/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC">維基百科</a><br />
簡單來說<br />
我們定義三個類別<br />
ClassRoom<br />
Teacher<br />
Student</p>

<p>在ClassRoom類別裡面去實例化Teacher和Student物件<br />
要開始教學，那我需要Teacher物件的的合作<br />
不過問題來了，因為我們是在ClassRoom類別裡面實例化的<br />
如果我有很多類別都這樣設計的呢<br />
那麼相互間的關係會錯綜複雜，各自間都有自己的耦合，後期多了之後<br />
會難以維護</p>

<p>spring ioc會自動處理物件的實例化並管理，減輕你內別內住的負擔<br />
當你下了@Component類型的注釋，一個spring bean的物件就會被建立出來<br />
並且注入到類別的變數裡面</p>

<h2 id="spring-boot-的-annotation">spring boot 的 annotation</h2>

<ul>
  <li>@Controller<br />
類別的注釋，容納一個Model物件，可以幫助我們資料與畫面的<br />
連結，並且方法會預設跟視圖連結，搜尋你指定的html</li>
  <li>@ResponseBody<br />
類別和方法的注釋，可以指示Controller以JSON或其他資料導向格式<br />
來回傳一個格式化的回應</li>
  <li>@RestController<br />
類別的注釋，@Controller與@ResponseBody的結合，可以幫你<br />
節省程式碼，REST API的好幫手</li>
</ul>

<h2 id="常用的http動詞">常用的http動詞</h2>
<p>REST API的設計是在下列的基礎之上</p>
<ul>
  <li>GET(讀取)</li>
  <li>POST(建立)</li>
  <li>PUT(更新)</li>
  <li>PATCH(更新)</li>
  <li>DELETE(刪除)</li>
</ul>

<h2 id="以spring-boot的注釋來建立動詞">以Spring boot的注釋來建立動詞</h2>

<ul>
  <li>@RequestMapping<br />
類別和方法的注釋<br />
有兩個重要參數<br />
value是 url<br />
method是http動詞，叫做RequestMethod的列舉</li>
</ul>

<p>@RequestMapping有幾個特化的注釋，都是用在方法的</p>
<ul>
  <li>@GetMapping</li>
  <li>@PostMapping</li>
  <li>@PutMapping</li>
  <li>@PatchMapping</li>
  <li>@DeleteMapping<br />
這些注釋各自對應到相應的動詞，並且只需要給url的參數就好</li>
</ul>

]]>
      </content:encoded>
      <wp:post_id>12</wp:post_id>
      <wp:post_date>2023-04-30 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-04-30 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>spring boot-基礎操作</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>Java-泛型</title>
      <link>http://example.com/Java-泛型/</link>
      <pubDate>Wed, 03 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="java">
        <![CDATA[java]]>
      </category>
      <guid isPermaLink="false">
jekyll-12-Java-泛型      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="java-泛型">Java-泛型</h1>

<h2 id="多重型態參數">多重型態參數</h2>

<p>人對應一個名子，地圖的區塊也會有對應其郵遞區號</p>

<p>Java允許你使用一個物件作為鍵值去存取另一個物件</p>

<p>讓兩者關係有連結，其中一個方法成為Pair型態</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Example</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;{</span>
<span class="o">}</span>

<span class="c1">//人對應一個名子(字串)</span>
<span class="nc">Example</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Person</span><span class="o">&gt;</span> <span class="n">ex1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Example</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Person</span><span class="o">&gt;();</span> 

<span class="c1">//區域對應一個數字</span>
<span class="nc">Example</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Region</span><span class="o">&gt;</span> <span class="n">ex2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Example</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Region</span><span class="o">&gt;();</span>

</code></pre></div></div>

<h2 id="泛型參數的使用範圍">泛型參數的使用範圍</h2>
<p>有兩個地方你無法在類別裡面使用泛型參數</p>

<ol>
  <li>靜態的成員變數</li>
  <li>指定給方法的泛型參數或者方法的回傳型態以泛型參數回傳</li>
</ol>

<p>錯誤範例</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Gen</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="kd">static</span> <span class="no">T</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">(</span><span class="no">T</span> <span class="n">v1</span><span class="o">){</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="no">T</span> <span class="nf">test2</span><span class="o">(){</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="泛型的靜態變數">泛型的靜態變數</h2>
<p>當你在泛型類別上面宣告靜態變數</p>

<p>並不會因為指定型別不同而有各自的靜態變數</p>

<p>不管你實例化幾種泛型，你還是只會有同一個靜態變數</p>

]]>
      </content:encoded>
      <wp:post_id>13</wp:post_id>
      <wp:post_date>2023-05-03 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-03 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>Java-泛型</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>spring boot-啟動資料庫</title>
      <link>http://example.com/spring boot-啟動資料庫/</link>
      <pubDate>Wed, 03 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="spring boot">
        <![CDATA[spring boot]]>
      </category>
      <guid isPermaLink="false">
jekyll-13-spring boot-啟動資料庫      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="spring-boot-啟動資料庫">spring boot-啟動資料庫</h1>

<h2 id="自動組態簡化程式碼的流程">自動組態簡化程式碼的流程</h2>
<p>存取資料庫這個流程，很多SOP都是一樣的，不過根據不同的資料庫</p>

<p>可能就讓人覺得有點煩躁，因為只有一些不同</p>

<p>Spring boot的自動組態會去偵測你的設定，合理的幫你建立出適合</p>

<p>Bean，我們需要做的事情就是把自訂的組態寫好即可</p>

<h2 id="hibernate">Hibernate</h2>
<p>Hibernate是一種Java語言下的物件關係對映（ORM）解決方案，不只<br />
Java類別到資料庫的映射，還有Java類別到資料庫型別的映射</p>

<h2 id="spring-data">Spring Data</h2>
<p>Spring Data是一個提通基於spring的程式模型而且同時也保持底層所使用<br />
資料庫的特徵，讓你可以更容易的操作資料庫</p>

<h2 id="如何加入到組態">如何加入到組態</h2>

<ul>
  <li>選擇一個Spring Data模組
    <ul>
      <li>Spring Data JPA</li>
      <li>Spring Data KeyValue</li>
      <li>Spring Data LDAP</li>
      <li>Spring Data MongoDB</li>
      <li>Spring Data Redis</li>
    </ul>
  </li>
  <li>資料庫廠商會提供資料庫驅動程式，讓你能利用程式去存取</li>
</ul>

<h2 id="spring-data-jpa">Spring Data JPA</h2>
<p>Spring Data JPA是在Jpa的規範上封裝的應用規範</p>

<p>當我們使用JPA模組，就要選擇與JPA有依存關係的</p>

<p>資料庫，並挑選特定的驅動程式</p>

<p>只要你是使用JPA模組，你就可以與其他相容於JPA的資料庫(如MySql, PostgreSQL)</p>

<h2 id="h2">H2</h2>
<p>H2是一個Java編寫的關係型資料庫，它可以被嵌入Java應用程式中使用，或者作為一個單獨的資料庫伺服器執行</p>

<p>H2是滿方便的資料庫，它可以基於硬碟儲存，不過當你改成其它JPA的資料庫時</p>

<p>程式碼不需要變更，以測試來說是相當方便的</p>

<p>Maven設定參考如下</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
</code></pre></div></div>
<h2 id="mysql">MySql</h2>

<p>spring.jpa.hibernate.ddl-auto=update<br />
spring.datasource.url=jdbc:mysql://localhost:3306/your_db_name<br />
spring.datasource.username=user<br />
spring.datasource.password=123456<br />
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</p>

<ul>
  <li>spring.jpa.hibernate.ddl-auto 可被設定成 none, update, create, or create-drop
    <ul>
      <li>none: MySQL 的默認值。沒有對數據庫結構進行任何更改</li>
      <li>update: Hibernate 根據給定的實體結構更改數據庫</li>
      <li>create: 每次都創建數據庫但不會在關閉時刪除它</li>
      <li>create-drop: 創建數據庫並在 SessionFactory 關閉時刪除它。</li>
    </ul>
  </li>
</ul>

<p>剛開始還未有資料庫時，請選擇create or update，當你運行過友資料庫之後使用update or none，<br />
當你資料庫想更新時請使用update</p>

<p>H2和其它嵌入式資料庫預設是create-drop，其它資料庫如MySql，預設是none</p>

<p>你通常不需要指定驅動程序類名(spring.datasource.driver-class-name)<br />
，因為 Spring boot 可以從 url 為大多數數據庫推斷出它</p>

<h2 id="為類別加入映射">為類別加入映射</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span>  <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>@Entity: 指示該類別是一個可以續存的實體<br />
@Id: 只要類別有注釋Entity，你必須給一個@Id注釋，這個相當於table的primary key</p>

<h3 id="存取entity">存取Entity</h3>
<p>你應該有注意到類別的成員變數是私有的，這樣會讓JPA無法存取物件的值<br />
有兩個解法</p>
<ol>
  <li>宣告成public</li>
  <li>使用public變動器方法</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span>  <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">){</span>
  <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nc">String</span>  <span class="nf">getId</span><span class="o">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>注意，命名要使用set + 變數名</p>

<h2 id="儲存庫repository">儲存庫(Repository)</h2>

<p>定義一個變數給儲存庫，</p>

<p>Repository是一個泛型Pair介面，可以參考我的<a href="/Java-泛型/#多重型態參數">文章介紹</a><br />
它定義的兩種型態分別是要儲存的物件型別，以及其Primary Key</p>

<p>Repository 是在Spring Data 裡面的一個介面，可以透過這個介面，對資料庫<br />
進行操作</p>

<h3 id="crudrepository">CrudRepository</h3>
<p>CrudRepository 是繼承了Repository介面，定義了幾種基本的CRUD功能，可以<br />
針對簡單的應用程式做操作</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="no">S</span> <span class="nf">save</span><span class="o">(</span><span class="no">S</span> <span class="n">entity</span><span class="o">);</span>

  <span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">S</span><span class="o">&gt;</span> <span class="nf">saveAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">S</span><span class="o">&gt;</span> <span class="n">entities</span><span class="o">);</span>

  <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="no">ID</span> <span class="n">id</span><span class="o">);</span>

  <span class="kt">boolean</span> <span class="nf">existsById</span><span class="o">(</span><span class="no">ID</span> <span class="n">id</span><span class="o">);</span>

  <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>

  <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAllById</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">ID</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">);</span>

  <span class="kt">long</span> <span class="nf">count</span><span class="o">();</span>

  <span class="kt">void</span> <span class="nf">deleteById</span><span class="o">(</span><span class="no">ID</span> <span class="n">id</span><span class="o">);</span>

  <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="no">T</span> <span class="n">entity</span><span class="o">);</span>

  <span class="kt">void</span> <span class="nf">deleteAllById</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">ID</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">);</span>

  <span class="kt">void</span> <span class="nf">deleteAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">entities</span><span class="o">);</span>

  <span class="kt">void</span> <span class="nf">deleteAll</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>
<p>這個是這個介面定義的的方法，我們挑幾個來看如何實現Crud</p>

<p>Create:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="no">S</span> <span class="nf">save</span><span class="o">(</span><span class="no">S</span> <span class="n">entity</span><span class="o">);</span>
<span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">S</span><span class="o">&gt;</span> <span class="nf">saveAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">S</span><span class="o">&gt;</span> <span class="n">entities</span><span class="o">);</span>
</code></pre></div></div>

<p>Read:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
<span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAllById</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">ID</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">);</span> 
</code></pre></div></div>
<p>Update:<br />
更新需要注意多一些東西<br />
用跟Create一樣的方法就可以了</p>

<p>用save就可以了，也可以加上HttpStatus去告知前端你的狀態<br />
是新增還是更新</p>

<p>還記得epository是Pair介面吧，Save底層肯定是利用ID的值<br />
去實現共用新增與更新</p>

<p>Delete:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">deleteAllById</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">ID</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">);</span>

<span class="kt">void</span> <span class="nf">deleteAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">entities</span><span class="o">);</span>

<span class="kt">void</span> <span class="nf">deleteAll</span><span class="o">();</span>
</code></pre></div></div>

<h2 id="自動組態的連線">自動組態的連線</h2>

<p>Spring boot會根據我們設定的資料庫驅動程式與Repository介面<br />
與Jpa Entiry去幫我們建立一個Database bean</p>

<p>可以使用可以使用建構式實現自動注入</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">CarRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;{}</span>

<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">CarController</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CarRepository</span> <span class="n">carRepository</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">CarController</span><span class="o">(</span><span class="nc">CarRepository</span> <span class="n">carRepository</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">carRepository</span> <span class="o">=</span> <span class="n">carRepository</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>14</wp:post_id>
      <wp:post_date>2023-05-03 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-03 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>spring boot-啟動資料庫</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>泛型定義</title>
      <link>http://example.com/泛型定義/</link>
      <pubDate>Wed, 03 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計風格">
        <![CDATA[設計風格]]>
      </category>
      <guid isPermaLink="false">
jekyll-14-泛型定義      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="泛型定義">泛型定義</h1>

<h2 id="準備群集類別">準備群集類別</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Group</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">){</span>
<span class="c1">//        code</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nc">Group</span> <span class="n">group</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Group</span><span class="o">();</span>
</code></pre></div></div>
<p>假設要設計一個群集，用add可以把它加進來</p>

<p>然後要要收集10元</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj_10</span><span class="o">);</span>
</code></pre></div></div>
<p>但不小心加到了錢包</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">wallet</span><span class="o">);</span>
</code></pre></div></div>

<p>程式都不會有錯，不過當你取物件來使用時，才會發現<br />
程式會執行錯誤</p>

<h2 id="型別安全">型別安全</h2>

<p>為了發生這種事情，需要確保程式的型別安全</p>

<p>例如10的群組，錢包的群組</p>

<p>他們各自自能加自己的型別</p>

<p>那肯定就不會有錯誤的型別亂入</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Group10</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">obj_10</span> <span class="n">obj</span><span class="o">){</span>
<span class="c1">//        code</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">GroupWallet</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Wallet</span> <span class="n">obj</span><span class="o">){</span>
<span class="c1">//        code</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>不過有點麻煩，你需要維護太多的類別了</p>

<h2 id="泛型的好處">泛型的好處</h2>

<p>泛型可以定義一個特定類別或方法，能夠讓這個程式以</p>

<p>型別安全的狀態下被處理，大體來說，泛型可以為其所</p>

<p>指定的類別的家族成員，你只需要在這些類別中，</p>

<p>給定適當的參數，就會像是該型態的類別或方法運行</p>

]]>
      </content:encoded>
      <wp:post_id>15</wp:post_id>
      <wp:post_date>2023-05-03 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-03 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>泛型定義</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>minimal mistakes 閱讀所需時間不準確</title>
      <link>http://example.com/minimal mistakes 閱讀所需時間不準確/</link>
      <pubDate>Fri, 05 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="Jekyll">
        <![CDATA[Jekyll]]>
      </category>
      <guid isPermaLink="false">
jekyll-15-minimal mistakes 閱讀所需時間不準確      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="minimal-mistakes-閱讀所需時間不準確">minimal mistakes 閱讀所需時間不準確</h1>

<h2 id="jekyll語系">Jekyll語系</h2>
<p>這問題是Jekyll語系的問題</p>

<p>在你的minimal mistakesa下的檔案 _includes\page__meta.html</p>

<p>主要是這一行</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>assign words = document.content | strip_html | number_of_words 
</code></pre></div></div>
<p>words 是你的內文全部的字數</p>

<p>strip_html和number_of_words是Liquid Filters(液體過濾器(找不到中文譯名))</p>

<p>strip_html可以去除html的標籤</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
"Have <span class="nt">&lt;em&gt;</span>you<span class="nt">&lt;/em&gt;</span> read <span class="nt">&lt;strong&gt;</span>Ulysses<span class="nt">&lt;/strong&gt;</span>?" | strip_html 
Ouput
Have you read Ulysses?
</code></pre></div></div>

<p>關鍵是number_of_words</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello world!" | number_of_words 

2

 "你好hello世界world" | number_of_words 

1

"你好hello世界world" | number_of_words: "cjk" 

6
</code></pre></div></div>
<p>英文的話會以英文單詞為一個單位<br />
無法辨識中文是一個字是一個單位</p>

<p>解決辦法是幫number_of_words加一個參數cjk</p>

<p>不過有一個難點<br />
需要 Jekyll v4.1.0 以上</p>

<h2 id="gemfile">Gemfile</h2>

<p>目錄下的Gemfile</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s2">"https://rubygems.org"</span>

<span class="n">gem</span> <span class="s2">"github-pages"</span><span class="p">,</span> <span class="ss">group: :jekyll_plugins</span>
<span class="n">gem</span> <span class="s2">"jekyll-include-cache"</span><span class="p">,</span> <span class="ss">group: :jekyll_plugins</span>
<span class="n">gem</span> <span class="s2">"webrick"</span><span class="p">,</span> <span class="s2">"~&gt; 1.8"</span>

</code></pre></div></div>
<p>Bundler是ruby的套件，根據目錄中Gemfile的設定自動下載及安裝Gem套件</p>

<p>叫github-pages的Gem套件</p>

<p>目前github-pages 的版本號是228<br />
有一個 jekyll = 3.9.3 的相依性套件</p>

<p>代表使用github-pages目前是無法套用number_of_words的參數的<br />
因為版本太舊了</p>

<h2 id="替代方法">替代方法</h2>

<p>目錄下的_config.yml</p>

<p>有一個叫words_per_minute的參數</p>

<p>根據_includes\page__meta.html</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>words | divided_by: words_per_minute  site.data.ui-text[site.locale].minute_read | default: "minute read" 
</code></pre></div></div>

<p>可以發現words/words_per_minute，可以得出閱讀時間<br />
所以我們可以透過調整words_per_minute的數值來達成比較準確的時間</p>

]]>
      </content:encoded>
      <wp:post_id>16</wp:post_id>
      <wp:post_date>2023-05-05 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-05 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>minimal mistakes 閱讀所需時間不準確</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>SQL-第一正規化</title>
      <link>http://example.com/SQL-第一正規化/</link>
      <pubDate>Mon, 08 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="SQL">
        <![CDATA[SQL]]>
      </category>
      <guid isPermaLink="false">
jekyll-16-SQL-第一正規化      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="sql-第一正規化">SQL-第一正規化</h1>

<h2 id="關聯式資料庫">關聯式資料庫</h2>

<p>到底什麼是關聯式?</p>

<p>指的是相互關聯的欄位，一同描述一個事物</p>

<p>但是要如何達成這個手段?</p>

<p>我們需要的是，必要的資訊描述</p>

<p>邏輯清晰的資料並且資料足夠分明的小單位</p>

<p>這些欄位也稱為單元性</p>

<h2 id="單元性">單元性</h2>

<p>已經收集好我們的需要的資料</p>

<p>但是如何可以界定所謂的小單位呢</p>

<p>以生日來說 2000/05/14</p>

<p>字面上的小單位直覺是</p>

<p>|  year   | month  | day |<br />
|  —-  | —-  |—-  |</p>

<p>這樣子可以不過也不是最正確的</p>

<p>因為根本不知道生日是用在什麼地方的</p>

<ol>
  <li>朋友
    <ul>
      <li>年月日放在同一個欄位叫生日，因為也不用一直看朋友是<br />
  幾年生幾月幾日</li>
    </ul>
  </li>
  <li>戶政系統
    <ul>
      <li>這邊就可以分成年月日三個欄位，因為很常需要較<br />
  細微的資料</li>
    </ul>
  </li>
</ol>

<p>看似抽象，仔細思考，其實很實際</p>

<p>單元性也幫助我們有效率去做查詢，你肯定不會想要每次都寫一長串<br />
又沒效率的指令</p>

<h2 id="正規化的規則">正規化的規則</h2>

<p>已經知道了單元性</p>

<p>符合單元性的值又要符合兩個條件</p>

<ol>
  <li>
    <p>不會有多個相同類型的值</p>

    <table>
      <thead>
        <tr>
          <th>check-up</th>
          <th>date</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>eye</td>
          <td>2023-05-30, 2023-06-07, 2023-06-17</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>不會有相同資料的欄位</p>

    <table>
      <thead>
        <tr>
          <th>check-up</th>
          <th>date1</th>
          <th>date2</th>
          <th>date3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>eye</td>
          <td>2023-05-30</td>
          <td>2023-06-07</td>
          <td>2023-06-17</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>

<h2 id="帶來哪些好處">帶來哪些<u>好處</u></h2>

<ol>
  <li>得到的搜索資料會更準確</li>
  <li>因減少重複的資料，資料庫會更精簡</li>
  <li>搜尋的母體變少，查詢速度更快</li>
</ol>

<p><span style="color:#ff00ff"> 資料從小做起，當它長成大人，也不會失去控制 </span></p>

<h2 id="正規化還未結束">正規化還未結束</h2>

<ol>
  <li>資料符合單元性</li>
  <li>每筆資料必須有一個主鍵(Primary Key)</li>
</ol>

<h2 id="primary-key-主鍵">PRIMARY KEY 主鍵</h2>

<ul>
  <li>
    <p>獨一無二<br />
值必須不重複，當然也不可以NULL，因為其他資料<br />
可以是NULL</p>
  </li>
  <li>
    <p>永遠不會修改<br />
主鑑就像是人的身份證字號，永遠不會修改，不然就會混亂</p>
  </li>
  <li>
    <p>簡單明瞭<br />
主鑑越簡單明瞭，就可讓資料庫比較小，還可以加快查詢速度</p>
  </li>
</ul>

<h2 id="幫加入資料表加入主鍵">幫加入資料表加入主鍵</h2>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>check_up</th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>eye</td>
      <td>2023-05-30</td>
    </tr>
    <tr>
      <td>2</td>
      <td>eye</td>
      <td>2023-06-07</td>
    </tr>
  </tbody>
</table>

<p>id 是主鍵，這是我們加入的人造主鍵</p>

<p>如此就完成正規化了</p>

<h3 id="自動增加">自動增加</h3>

<p>主鍵如果是要自己增加數字，是非常麻的事情<br />
還好，加上關鍵字<span style="color:#ff00ff">AUTO_INCREMENT</span>可以幫你依序增加數字</p>

<h2 id="新增主鍵">新增主鍵</h2>

<p>關鍵字是PRIMARY KEY</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">health</span>
<span class="p">(</span>
   <span class="n">id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
   <span class="n">check_up</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
   <span class="nb">date</span> <span class="nb">DATE</span><span class="p">,</span>
   <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>
<p>如果你幫已經存在的資料表新增主鍵<br />
可以使用ALTER指令</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">health2</span>
<span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
<span class="k">ADD</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>17</wp:post_id>
      <wp:post_date>2023-05-08 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-08 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>SQL-第一正規化</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>SQL-第二、三正規化</title>
      <link>http://example.com/SQL-第二、三正規化/</link>
      <pubDate>Mon, 15 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="SQL">
        <![CDATA[SQL]]>
      </category>
      <guid isPermaLink="false">
jekyll-17-SQL-第二、三正規化      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="sql-第二三正規化">SQL-第二、三正規化</h1>

<p>在<a href="/SQL-第一正規化/#正規化的規則">第一正規化</a>文章裡<br />
我們的健康檢查資料表，有很多的眼睛的健康檢查時間<br />
明顯一個資料表已經不夠用了，會有太多筆<br />
必須多增加資料表來處理這個問題</p>

<h2 id="過多的日期選擇不易">過多的日期，選擇不易</h2>

<ol>
  <li>
    <p>多個相同類型的值</p>

    <table>
      <thead>
        <tr>
          <th>check-up</th>
          <th>date</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>eye</td>
          <td>2023-05-30, 2023-06-07, 2023-06-17</td>
        </tr>
      </tbody>
    </table>

    <p>當你查詢此筆資料時，這麼多的日期，會令人感到疑惑<br />
 而且查詢也會比較複雜，你要去分割字串，不只麻煩還不夠直覺</p>
  </li>
  <li>
    <p>有相同資料的欄位</p>

    <table>
      <thead>
        <tr>
          <th>check-up</th>
          <th>date1</th>
          <th>date2</th>
          <th>date3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>eye</td>
          <td>2023-05-30</td>
          <td>2023-06-07</td>
          <td>2023-06-17</td>
        </tr>
      </tbody>
    </table>

    <p>雖然沒有很多的日期，不過有很多一樣的欄位<br />
 同樣會令人感到疑惑<br />
 查詢同樣麻煩，要加上滿多的 OR</p>
  </li>
</ol>

<h2 id="設計新的資料表">設計新的資料表</h2>

<p>移除了第一張表的日期，加入第二張資料表</p>

<table>
  <thead>
    <tr>
      <th>health</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>health_id</td>
    </tr>
    <tr>
      <td>check_up</td>
    </tr>
  </tbody>
</table>

<p>第二張表也加入id，可以保證不重複</p>

<table>
  <thead>
    <tr>
      <th>chekc_up_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>check_id</td>
    </tr>
    <tr>
      <td>date</td>
    </tr>
  </tbody>
</table>

<p>然後是，如何使這兩張表產生連結，達到正規化並且容易<br />
查詢的目的</p>

<h2 id="連結兩張資料表">連結兩張資料表</h2>

<p>由於health資料表已經正規化，也有一個獨一無二的主鍵<br />
把這一個主鍵提供第二個資料表，第二個資料表也可以第一正規化</p>

<table>
  <thead>
    <tr>
      <th>chekc_up_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>check_id</td>
    </tr>
    <tr>
      <td>date</td>
    </tr>
    <tr>
      <td>health_id</td>
    </tr>
  </tbody>
</table>

<p>health_id這一個新的欄位叫做外鍵，它參照另一張資料表的主鍵</p>

<h2 id="外鍵">外鍵</h2>

<ol>
  <li>外鍵使用的主鍵，也稱為父鍵，對應的表稱為父資料表</li>
  <li>外鍵可以是NULL</li>
  <li>外鍵不需要獨一無二</li>
  <li>不一定是父資料表的主鍵，但要有唯一性</li>
</ol>

<h3 id="建立有外鍵的資料表">建立有外鍵的資料表</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">health</span>
<span class="p">(</span>
   <span class="n">health_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>  <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
   <span class="n">check_up</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
   <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">health_id</span><span class="p">)</span>
<span class="p">);</span>


<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">check_up_date</span>
<span class="p">(</span>
   <span class="n">check_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>  <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
   <span class="nb">date</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
   <span class="n">health_id</span> <span class="nb">INT</span><span class="p">,</span>
   <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">check_id</span><span class="p">),</span>
   <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">health_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">health</span> <span class="p">(</span><span class="n">health_id</span><span class="p">)</span>
<span class="p">);</span>

<span class="err">先加入父資料表</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">health</span>
<span class="p">(</span><span class="n">check_up</span><span class="p">)</span>
<span class="k">VALUES</span>
<span class="p">(</span><span class="s1">'eye'</span><span class="p">);</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>health_id</th>
      <th>check_up</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>eye</td>
    </tr>
  </tbody>
</table>

<p>馬上加入子資料表的資料<br />
特別加入health_id是3的資料<br />
目前父資料表只有一筆health_id是1的資料</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span>  <span class="n">check_up_date</span>
<span class="p">(</span><span class="nb">date</span><span class="p">,</span> <span class="n">health_id</span><span class="p">)</span>
<span class="k">VALUES</span>
<span class="p">(</span><span class="s1">'2023-05-11'</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<p>得到一串錯誤訊息<br />
Cannot add or update a child row: a foreign key constraint fails (<code>my_db</code>.<code>check_up_date</code>, CONSTRAINT <code>check_up_date_ibfk_1</code> FOREIGN KEY (<code>health_id</code>) REFERENCES <code>health</code> (<code>health_id</code>))</p>

<p>這個錯誤是外鍵限制的錯誤</p>

<h2 id="外鍵限制">外鍵限制</h2>

<p>插入外鍵的值，必須已經存在在父資料表裡面，這叫參照完整性</p>

<p>增加了這一個限制，可以防止你意外破壞了外鍵的規矩</p>

<p>不過我們思考一下，我們哪時候有加上外鍵限制嗎?</p>

<p>外鍵限制是預設的</p>

<p>以這個例子是名子是check_up_date_ibfk_1</p>

<p>你可以通過create or alter 指令去指定外鍵限制的名子</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">check_up_date</span>
<span class="p">(</span>
    <span class="n">check_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>  <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="nb">date</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
    <span class="n">health_id</span> <span class="nb">INT</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">(</span><span class="n">check_id</span><span class="p">),</span>
    <span class="k">CONSTRAINT</span> <span class="n">health_health_id_fk</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">health_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">health</span> <span class="p">(</span><span class="n">health_id</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="刪除外鍵限制">刪除外鍵限制</h3>

<p>根據不同DB語法不同</p>

<ul>
  <li>MySQL
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">check_up_date</span> <span class="k">DROP</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="n">health_health_id_fk</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>SQL Server / Oracle / MS Access
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">check_up_date</span> <span class="k">DROP</span> <span class="k">CONSTRAINT</span> <span class="n">health_health_id_fk</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>外鍵限制的名稱，最好樣養成良好的命名習慣，以防你日後改面心意想要修改時才好解除</p>

<p>解除之後，上面的錯誤就不會出現，因為你已經不用遵守父資料表的完全參照</p>

<h2 id="刪除資料在父子資料表的相對關係">刪除資料在父子資料表的相對關係</h2>

<p>當你想要刪除health資料表的某筆資料時</p>

<p>而且它又是check_up_date某幾筆資料的外鍵時</p>

<p>你無法立刻刪除它</p>

<p>你必須先刪掉check_up_date裡某些使用此外鍵的資料</p>

<p>才可以刪掉health的那筆資料</p>

<p>這樣可以防止資料孤兒的狀況產生，資料孤兒太多會拖類整理查詢的速度</p>

<h2 id="資料表的關聯">資料表的關聯</h2>

<p>資料表的關係有三種主要的方式</p>

<ul>
  <li>一對一</li>
  <li>一對多</li>
  <li>多對多</li>
</ul>

<p>思考出自己的資料是屬於哪一種，你就可以設計出適合的資料庫綱要(schema)</p>

<h2 id="一對一">一對一</h2>

<p><u>資料表A</u>的一筆資料最多只能與<u>資料表B</u>的一筆資料關聯</p>

<table>
  <thead>
    <tr>
      <th>line</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>line_id</td>
    </tr>
    <tr>
      <td>account</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Plateform_A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GameA_id</td>
    </tr>
    <tr>
      <td>account</td>
    </tr>
    <tr>
      <td>line_id(外鍵)</td>
    </tr>
  </tbody>
</table>

<p>例如現在有一些平台可以透過line申請帳號</p>

<p>而且一個line只能申請一個帳號，反過來看一個平台帳號</p>

<p>也只能對應一個line的帳號，這個就是一對一</p>

<p>一對一很少使用，有幾個使用的時機供參考</p>

<ol>
  <li>
    <p>如上述的例子，不需要每次知道其他平台的資訊<br />
  可以抽出資料，讓查詢的速度更快而且資料表也更清晰</p>
  </li>
  <li>假如有一些比較敏感的資料，可以存在另外一個資料表，控制存取次數</li>
  <li>如果是有特別大的資料在某些欄位，也可以分出來，另外用一張資料表<br />
  儲存</li>
</ol>

<h2 id="一對多">一對多</h2>

<p><u>資料表A</u>的一筆資料能與<u>資料表B</u>的多筆資料關聯<br />
但<u>資料表B</u>的一筆資料只能與<u>資料表A</u>的一筆資料關聯</p>

<p>例如房地產，它是一對多的關係</p>

<table>
  <thead>
    <tr>
      <th>people</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>people_id</td>
    </tr>
    <tr>
      <td>money</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>real_estate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>real_estate_id</td>
    </tr>
    <tr>
      <td>price</td>
    </tr>
    <tr>
      <td>people_id_id(外鍵)</td>
    </tr>
  </tbody>
</table>

<p>一個人可以有很多房地產，但是一個房地產只會與一個人有關連</p>

<h2 id="多對多">多對多</h2>
<p>這是根據求職往的調查，青年男女的夢想職業如下</p>

<table>
  <thead>
    <tr>
      <th>男性夢想職業</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>科技工程師</td>
    </tr>
    <tr>
      <td>電競選手</td>
    </tr>
    <tr>
      <td>網紅</td>
    </tr>
    <tr>
      <td>銀行家</td>
    </tr>
    <tr>
      <td>社群小編</td>
    </tr>
    <tr>
      <td>主廚</td>
    </tr>
    <tr>
      <td>作家</td>
    </tr>
    <tr>
      <td>演藝人員</td>
    </tr>
    <tr>
      <td>機師</td>
    </tr>
    <tr>
      <td>老師</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>女性夢想職業</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>社群小編</td>
    </tr>
    <tr>
      <td>網紅</td>
    </tr>
    <tr>
      <td>烘焙師傅</td>
    </tr>
    <tr>
      <td>空服員</td>
    </tr>
    <tr>
      <td>作家</td>
    </tr>
    <tr>
      <td>演藝人員</td>
    </tr>
    <tr>
      <td>模特兒</td>
    </tr>
    <tr>
      <td>銀行家</td>
    </tr>
    <tr>
      <td>音樂家</td>
    </tr>
    <tr>
      <td>藝術家</td>
    </tr>
  </tbody>
</table>

<p>每個男女都有很多的夢想職業，而且每個夢想職業也是很多男女的目標</p>

<p>這種很多與很多的關係稱為多對多</p>

<h3 id="多對多的關係圖">多對多的關係圖</h3>

<p><img src="https://images2.imgbox.com/a0/c5/kVGR3yta_o.jpg?download=true" alt="xsdfsd" /></p>

<p>使用外鍵來觀察<br />
<img src="https://images2.imgbox.com/e9/e7/Dwb3n5aW_o.jpg?download=true" alt="xsdfsd" /></p>

<p>職業名稱與women_id會有很多重複</p>

<p>這樣會造成資料表太大並且造成搜尋比較慢</p>

<h2 id="junction-table">Junction table</h2>

<p><img src="https://images2.imgbox.com/97/d3/De4cKUw5_o.jpg?download=true" alt="xsdfsd" /></p>

<p>加入兩個表的主鍵，組成一個稱為Junction table的表</p>

<p>可以大大減少重複的資料，增加db的效能</p>

<h2 id="組合鍵">組合鍵</h2>

<p>剛剛所使用的Junction table就是一種組合鍵，因為它有雙主鍵</p>

<p>組合鍵的定義就是一個以上的主鍵</p>

<p>不只這樣，組合鍵也跟後續的正規化有關係</p>

<p>以下是一個組合鍵table的示範<br />
欄位是地區、工作、職缺數、工作類別</p>

<table>
  <thead>
    <tr>
      <th>area(主)</th>
      <th>job(主)</th>
      <th>vacancies</th>
      <th>category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>台北</td>
      <td>社群小編</td>
      <td>99</td>
      <td>行銷企劃人員</td>
    </tr>
    <tr>
      <td>高雄</td>
      <td>演藝人員</td>
      <td>13</td>
      <td>傳播藝術</td>
    </tr>
    <tr>
      <td>香港</td>
      <td>演藝人員</td>
      <td>101</td>
      <td>傳播藝術</td>
    </tr>
    <tr>
      <td>台中</td>
      <td>作家</td>
      <td>12</td>
      <td>文字工作者</td>
    </tr>
    <tr>
      <td>台北</td>
      <td>音樂家</td>
      <td>12</td>
      <td>傳播藝術</td>
    </tr>
  </tbody>
</table>

<h3 id="互相關聯的欄位">互相關聯的欄位</h3>

<p>設計資料表時，有時候兩個欄位會互相有關係，當A欄位被改動時，B就必須改動<br />
這就稱為<u>A對B有功能相依性</u></p>

<h3 id="當你關聯鍵的時候">當你關聯鍵的時候</h3>
<p>當你與主鍵有相依性的時候，事情就會更複雜一點了<br />
因為主鍵有可能有很多個</p>

<p>vacancies相依於area與job<br />
職缺數與 地區與工作相關<br />
這是完全相依於主鍵</p>

<p>category相依於job不相依於area<br />
工作類別與工作關聯與地區不關聯<br />
這叫部分相依性</p>

<h2 id="第二正規化">第二正規化</h2>

<p>第二正規化要符合兩個條件</p>
<ol>
  <li>符合第一正規化</li>
  <li>沒有部分相依性</li>
</ol>

<p>上述的表由於category有部分相依性<br />
要解決這個問題，可以把有部分相依的欄位獨立成一個資料表</p>

<table>
  <thead>
    <tr>
      <th>area(主)</th>
      <th>job(主)</th>
      <th>vacancies</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>台北</td>
      <td>社群小編</td>
      <td>99</td>
    </tr>
    <tr>
      <td>高雄</td>
      <td>演藝人員</td>
      <td>13</td>
    </tr>
    <tr>
      <td>香港</td>
      <td>演藝人員</td>
      <td>10</td>
    </tr>
    <tr>
      <td>台中</td>
      <td>作家</td>
      <td>12</td>
    </tr>
    <tr>
      <td>台北</td>
      <td>音樂家</td>
      <td>12</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>job</th>
      <th>category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>社群小編</td>
      <td>行銷企劃人員</td>
    </tr>
    <tr>
      <td>演藝人員</td>
      <td>傳播藝術</td>
    </tr>
    <tr>
      <td>演藝人員</td>
      <td>傳播藝術</td>
    </tr>
    <tr>
      <td>作家</td>
      <td>文字工作者</td>
    </tr>
    <tr>
      <td>音樂家</td>
      <td>傳播藝術</td>
    </tr>
  </tbody>
</table>

<p>更快速可以達到第二正規化的方式是<br />
符合第一正規化並且只有一個主鍵</p>

<h2 id="遞移功能相依性">遞移功能相依性</h2>

<p>指的是非主鍵的欄位只要更改，就會造成其他非主鍵欄位的變動<br />
此稱為遞移功能相依性</p>

<p>如職缺數與最近新增就是此等關係<br />
職缺數只要變多，最近新增的工作一定也是變多的</p>

<table>
  <thead>
    <tr>
      <th>area(主)</th>
      <th>job(主)</th>
      <th>vacancies</th>
      <th>recently_added</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>台北</td>
      <td>社群小編</td>
      <td>99</td>
      <td>27</td>
    </tr>
    <tr>
      <td>高雄</td>
      <td>演藝人員</td>
      <td>13</td>
      <td>7</td>
    </tr>
    <tr>
      <td>香港</td>
      <td>演藝人員</td>
      <td>10</td>
      <td>4</td>
    </tr>
    <tr>
      <td>台中</td>
      <td>作家</td>
      <td>12</td>
      <td>5</td>
    </tr>
    <tr>
      <td>台北</td>
      <td>音樂家</td>
      <td>12</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h2 id="第三正規化">第三正規化</h2>

<p>要達成第三正規化要滿足兩個條件</p>

<ol>
  <li>符合第二正規化</li>
  <li>沒有遞移功能相依性</li>
</ol>

<p>以上述的資料表為例子的話</p>

<table>
  <thead>
    <tr>
      <th>job_status_id(主)</th>
      <th>vacancies</th>
      <th>recently_added</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>1</td>
      <td>99</td>
      <td>27</td>
    </tr>
    <tr>
      <td> </td>
      <td>2</td>
      <td>13</td>
      <td>7</td>
    </tr>
    <tr>
      <td> </td>
      <td>3</td>
      <td>10</td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td>4</td>
      <td>12</td>
      <td>5</td>
    </tr>
    <tr>
      <td> </td>
      <td>5</td>
      <td>12</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>area(主)</th>
      <th>job(主)</th>
      <th>job_status_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>台北</td>
      <td>社群小編</td>
      <td>1</td>
    </tr>
    <tr>
      <td>高雄</td>
      <td>演藝人員</td>
      <td>2</td>
    </tr>
    <tr>
      <td>香港</td>
      <td>演藝人員</td>
      <td>3</td>
    </tr>
    <tr>
      <td>台中</td>
      <td>作家</td>
      <td>4</td>
    </tr>
    <tr>
      <td>台北</td>
      <td>音樂家</td>
      <td>5</td>
    </tr>
  </tbody>
</table>

<p>資料間的關係應以主鍵為主，不考慮主鍵以外的因素</p>

]]>
      </content:encoded>
      <wp:post_id>18</wp:post_id>
      <wp:post_date>2023-05-15 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-15 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>SQL-第二、三正規化</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>SQL-內部連結</title>
      <link>http://example.com/SQL-內部連結/</link>
      <pubDate>Tue, 16 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="SQL">
        <![CDATA[SQL]]>
      </category>
      <guid isPermaLink="false">
jekyll-18-SQL-內部連結      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="sql-內部連結">SQL-內部連結</h1>

<h2 id="交叉連結cross-join準備來聯誼了">交叉連結(cross join)，準備來聯誼了</h2>

<p>兩個資料表，boys、girls</p>

<table>
  <thead>
    <tr>
      <th>boy_id</th>
      <th>name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Adam</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Alexander</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Mike</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>girl_id</th>
      <th>name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Sharon</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Rebecca</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Nina</td>
    </tr>
  </tbody>
</table>

<p><img src="https://images2.imgbox.com/0a/44/EJJ10qWY_o.jpg?download=true" alt="111" /></p>

<ul>
  <li>*號會搜尋兩張表格所有的欄位</li>
  <li>select boys.name, girls.name  from boys cross join girls;<br />
可以使用 資料表名.欄位名 去搜尋想要的欄位</li>
  <li>可以使用as 幫欄位或資料表別名</li>
  <li>省略不寫cross join的語法 select * from boys, girls</li>
</ul>

<p>交叉連結可以列出所有的可能性，可以幫助我們除錯  <br />
也可測試軟體的執行速度</p>

<h2 id="inner-join">Inner join</h2>

<p>內部連結又是透過特定的條件，移除交叉連結的某些結果</p>

<p>select *  from boys inner join girls on boys.boy_id = girls.girl_id;</p>

<p><img src="https://images2.imgbox.com/0d/e4/noYTIycg_o.jpg?download=true" alt="inner join" /></p>

<ul>
  <li>使用inner join on(where也可以) 條件式運算子</li>
</ul>

<h2 id="自然連結natural-join">自然連結(NATURAL JOIN)</h2>

<p>當兩個資料表的欄位名稱一樣時，並且值是一樣的時候</p>

<p>要注意一個點  <br />
自然連結不是透過ON、WHERE這些關鍵字去結合條件子句  <br />
會自動解析兩表內一樣的欄位名稱，自動的來解析連結  <br />
所以要多多留意全部的欄位名稱再使用</p>

<p>下列為兩張表boy_friends與girls</p>

<p>select * from boy_friends natural join girls;</p>

<p><img src="https://images2.imgbox.com/16/18/nhZFfodf_o.jpg?download=true" alt="自然連結" /></p>

]]>
      </content:encoded>
      <wp:post_id>19</wp:post_id>
      <wp:post_date>2023-05-16 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-16 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>SQL-內部連結</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>this與javascript</title>
      <link>http://example.com/this與javascript/</link>
      <pubDate>Tue, 16 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="javascript">
        <![CDATA[javascript]]>
      </category>
      <guid isPermaLink="false">
jekyll-19-this與javascript      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="this與javascript">this與javascript</h1>

<h2 id="this在全域上使用">this在全域上使用</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">test1</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj_1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span> <span class="p">:</span><span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">fn1</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kd">class</span> <span class="nc">ClassJack</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="nf">test1</span><span class="p">();</span>  <span class="c1">//直接呼叫</span>
<span class="k">new</span> <span class="nf">test1</span><span class="p">();</span> <span class="c1">//實例化 主要是觀察使用實例化會不會改變this指向</span>
<span class="nx">obj_1</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span> <span class="c1">//使用物件呼叫</span>
<span class="k">new</span> <span class="nc">ClassJack</span><span class="p">();</span> <span class="c1">//新語法實例化</span>

<span class="c1">//output</span>

<span class="nb">global</span> <span class="p">{</span><span class="nl">global</span><span class="p">:</span> <span class="nb">global</span><span class="p">,</span> <span class="nx">clearInterval</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">clearTimeout</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">setInterval</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">setTimeout</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="err">…</span><span class="p">}</span>

<span class="nx">test1</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span><span class="p">}</span>

<span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span><span class="p">,</span> <span class="na">fn1</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">}</span>

<span class="nx">ClassJack</span> <span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span><span class="p">}</span>

</code></pre></div></div>
<p>主要是看最後一個呼叫方法的物件，如果沒有的話就是global</p>

<p>如果實例化，this就會指向實例化的物件</p>

<h2 id="更深層的this">更深層的this</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">jack_1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">jack1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">fn1</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">jack_2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">jack2</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">fn1</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">jack_1</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">jack_3</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fn1</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">jack3</span><span class="dl">'</span><span class="p">,</span>
        <span class="kd">var</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="nx">jack_1</span><span class="p">.</span><span class="nx">fn1</span><span class="p">;</span>
        <span class="nf">fn2</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jack_1</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span>
<span class="nx">jack_2</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span>
<span class="nx">jack_3</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span>

<span class="nx">output</span>

<span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nx">jack</span>
<span class="kc">undefined</span>
</code></pre></div></div>

<p>jack_1.fn1();  <br />
輸出是jack</p>

<p>jack_2.fn1();  <br />
剛剛有提過，this會指向最後呼叫的物件  <br />
this 指向 jack_1  <br />
因此輸出也是jack</p>

<p>jack_3.fn1();  <br />
這邊是在方法fn1裡面宣告fn2區域變數  <br />
fn2取得jack_1.fn1的參考  <br />
但fn2並不是某物件的方法，所以this會指向global  <br />
global沒有定義name，因此是undefined</p>

<h2 id="callapplaybind-與-this">call、applay、bind 與 this</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">callFn</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">jack</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">jack_4</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jack4</span><span class="dl">"</span>
<span class="p">};</span>


<span class="nb">global</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">brown</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">callFn</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">jack_4</span><span class="p">);</span>
<span class="kd">var</span>  <span class="nx">callFn1</span> <span class="o">=</span> <span class="nx">callFn</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">jack_4</span><span class="p">);</span>
<span class="nf">callFn1</span><span class="p">();</span>
<span class="nx">callFn</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nx">jack_4</span><span class="p">);</span>
<span class="nx">callFn</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

<span class="nx">output</span>

<span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="nx">jack4</span>
<span class="nx">brown</span>

</code></pre></div></div>

<p>第一個參數是this的執行環境  <br />
若這個函數是在非嚴苛模式並且第一個參數是null 、undefined 將會被置換成全域變數，而原生型態的值將會被封裝</p>

<p>這是mdn的解釋  <br />
我是理解是如果被取代，那原本的值會被隱藏起來</p>

<h2 id="匿名方法與this">匿名方法與this</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">FnTest1</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
    <span class="nf">callback</span><span class="p">();</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj_3</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">obj_3</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">fn1</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">500</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="na">fn2</span> <span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span><span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">fn3</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nc">FnTest1</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">obj_3</span><span class="p">.</span><span class="nf">fn1</span><span class="p">();</span>
<span class="nx">obj_3</span><span class="p">.</span><span class="nf">fn2</span><span class="p">();</span>
<span class="nx">obj_3</span><span class="p">.</span><span class="nf">fn3</span><span class="p">();</span>

<span class="nx">output</span>

<span class="nb">global</span> <span class="p">{</span><span class="nl">global</span><span class="p">:</span> <span class="nb">global</span><span class="p">,</span> <span class="nx">clearInterval</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">clearTimeout</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">setInterval</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">setTimeout</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="err">…</span><span class="p">}</span>
<span class="k">this</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">81</span>

<span class="nx">Timeout</span> <span class="p">{</span><span class="nl">_idleTimeout</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">_idlePrev</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">_idleNext</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">_idleStart</span><span class="p">:</span> <span class="mi">165</span><span class="p">,</span> <span class="nx">_onTimeout</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="err">…</span><span class="p">}</span>
<span class="k">this</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">71</span>

<span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">obj_3</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fn1</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">fn2</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">,</span> <span class="nx">fn3</span><span class="p">:</span> <span class="nx">ƒ</span><span class="p">}</span>
</code></pre></div></div>

<p>第一個輸出是fn3  <br />
因為匿名方法沒有上一個呼叫的物件，所以就變成全域的呼叫  <br />
this就指向global</p>

<p>第二個輸出是fn1  <br />
這個匿名方法的輸出竟然是Timeout物件，有可能global的setTimeout方法  <br />
實際上是由global的Timout物件去呼叫此方法  <br />
所以this才指向Timeout</p>

<p>第三個輸出是fn2  <br />
不過如果把this指向目前方法所在的物件，不想要讓this指向呼叫它的物件  <br />
可以使用箭頭方法去指向匿名方法  <br />
即可完成this的轉向</p>

]]>
      </content:encoded>
      <wp:post_id>20</wp:post_id>
      <wp:post_date>2023-05-16 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-16 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>this與javascript</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>SQL-子查詢</title>
      <link>http://example.com/SQL-子查詢/</link>
      <pubDate>Sat, 20 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="SQL">
        <![CDATA[SQL]]>
      </category>
      <guid isPermaLink="false">
jekyll-20-SQL-子查詢      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="sql-子查詢">SQL-子查詢</h1>

<h2 id="下兩次指令">下兩次指令</h2>

<p>interest</p>

<table>
  <thead>
    <tr>
      <th>interest_id</th>
      <th>interest_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Community Involvement</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Writing</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Blogging</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Learning Languages</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Photography</td>
    </tr>
  </tbody>
</table>

<p>student</p>

<table>
  <thead>
    <tr>
      <th>student_id</th>
      <th>student_name</th>
      <th>interest_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Adam</td>
      <td>Learning Languages</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Sharon</td>
      <td>Writing</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Rebecca</td>
      <td>Photography</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Nina</td>
      <td>Learning Languages</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Mike</td>
      <td>YOGA</td>
    </tr>
  </tbody>
</table>

<p>想要找出學生的興趣有沒有Photography、Writing</p>

<p>SELECT * FROM student  <br />
WHERE interest_name IN(‘Photography’,’Writing’);</p>

<p>想要找出有在興趣列表裡面的學生</p>

<p>SELECT interest_name FROM interest;  <br />
搜尋出結果後  <br />
再貼到WHERE interest_name IN(‘’’’);  <br />
但步驟太多了</p>

<h2 id="結合兩個指令">結合兩個指令</h2>

<p>SELECT * FROM student  <br />
WHERE interest_name IN(SELECT interest_name FROM interest);</p>

<p><span style="color:#ff00ff"> 外層查詢</span>  <br />
<span style="color:#1e90ff"> 內層查詢，或稱子查詢 </span></p>

<p><span style="color:#ff00ff">  SELECT * FROM student  
WHERE interest_name IN</span>(<span style="color:#1e90ff">  SELECT interest_name FROM interest </span>)</p>

<h4 id="連結也有同樣效果">連結也有同樣效果</h4>
<p><code>SELECT * FROM student NATURAL JOIN interest;</code></p>

<h2 id="子查詢規則">子查詢規則</h2>

<ol>
  <li>在括號()裡面</li>
  <li>沒有自己的分號;</li>
  <li>是一個select敘述</li>
</ol>

<h2 id="作為資料欄的子查詢">作為資料欄的子查詢</h2>

<p>student</p>

<table>
  <thead>
    <tr>
      <th>student_id</th>
      <th>student_name</th>
      <th>interest_name</th>
      <th>major_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Adam</td>
      <td>Learning Languages</td>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Sharon</td>
      <td>Writing</td>
      <td>1</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Rebecca</td>
      <td>Photography</td>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Nina</td>
      <td>Learning Languages</td>
      <td>3</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Mike</td>
      <td>YOGA</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<p>major</p>

<table>
  <thead>
    <tr>
      <th>major_id</th>
      <th>major_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Computer Engineering</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Asian History</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Music Pedagogy</td>
    </tr>
  </tbody>
</table>

<p>SELECT st.student_name, (SELECT interest_name from interest AS it WHERE st.student_id = it.interest_id )  <br />
<span style="color:#ff00ff"> as new_interest_name </span>  FROM student AS st ;</p>

<p>如果是用於作為資料欄的子查詢，一次只能從一個資料欄回傳一個值</p>

<h2 id="非關聯式子查詢">非關聯式子查詢</h2>

<p>SELECT * FROM student WHERE major  <br />
WHERE major = (<span style="color:#ff00ff"> SELECT major_name FROM major WHERE major_id = 1 </span> )</p>

<p>當子查詢可以單獨執行，不相依於外層查詢時，它就是非關聯式子查詢</p>

<h2 id="關聯式子查詢">關聯式子查詢</h2>

<p>SELECT st.student_name, (SELECT interest_name from interest AS <span style="color:#ff00ff">  it </span> WHERE <span style="color:#1e90ff">  st.student_id </span>=<span style="color:#ff00ff">  = it.interest_id </span>)  <br />
as new_interest_name FROM student AS <span style="color:#1e90ff"> st </span> ;</p>

<p>與非關聯式子查詢相反，子查詢會與外層查詢有相依性  <br />
也就是子查詢無法單獨存在，必須與外層查詢共生</p>

<h2 id="關聯式子查詢與-not-exists搭配">關聯式子查詢與 NOT EXISTS搭配</h2>

<p>可以在關聯式子查詢的用法中，找出外層查詢不存於子查詢的資料</p>

<p>SELECT * FROM student AS st  <br />
WHERE NOT EXISTS  <br />
(SELECT * FROM interest AS it  <br />
WHERE it.interest_name = st.interest_name)</p>

<p>EXISTS 存在  <br />
NOT EXISTS 不存在  <br />
這兩種都可以使用</p>

]]>
      </content:encoded>
      <wp:post_id>21</wp:post_id>
      <wp:post_date>2023-05-20 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-20 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>SQL-子查詢</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>java-巢狀類別</title>
      <link>http://example.com/java-巢狀類別/</link>
      <pubDate>Sat, 20 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="java">
        <![CDATA[java]]>
      </category>
      <guid isPermaLink="false">
jekyll-21-java-巢狀類別      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="java-巢狀類別">java-巢狀類別</h1>

<p>建立一個java的Console範本程式  <br />
Main稱為外層類別，裡面的類別稱為巢狀類別  <br />
在類別裡面再定義一個Class1  <br />
然後去new，會得到一個錯誤  <br />
com.company.Main.this’ cannot be referenced from a static context</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">class</span> <span class="nc">Class1</span> <span class="o">{</span>

  <span class="o">}</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// write your code here</span>
      <span class="nc">Class1</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Class1</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>這個令人疑惑的錯誤  <br />
其實 Class1 c1 = new Class1();  <br />
編譯器會加上this，Class1 c1 = this.new Class1();</p>

<p>但這樣為什麼會造成錯誤?  <br />
因為this指向的Main還未實例化  <br />
可以先建立Main物件，再去實例化Class1</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Main</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">();</span>
<span class="nc">Class1</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">new</span> <span class="nf">Class1</span><span class="o">();</span>
</code></pre></div></div>
<p>你也可以把巢狀類別定義為static</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class2</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">.</span><span class="na">Class2</span><span class="o">();</span> 
</code></pre></div></div>

<h2 id="巢狀類別的成員變數">巢狀類別的成員變數</h2>

<p>static或non-static巢狀類別  <br />
都可以定義static和non-static members</p>

<h2 id="巢狀類別的存取範圍">巢狀類別的存取範圍</h2>

<p>non-static巢狀類別  <br />
可以存取</p>
<ul>
  <li>在最高階層內的任何static成員或者static類別的static成員</li>
  <li>最高階層的non-static成員</li>
  <li>自己類別內的成員</li>
</ul>

<p>static巢狀類別  <br />
可以存取</p>
<ul>
  <li>在最高階層內的任何static成員或者static類別的static成員</li>
  <li>自己類別內的成員</li>
</ul>

<h2 id="區域巢狀類別">區域巢狀類別</h2>

<p>方法也可以定義類別，稱為區域巢狀類別  <br />
這個可以用在單一用途，確定其他地方都不用到</p>

]]>
      </content:encoded>
      <wp:post_id>22</wp:post_id>
      <wp:post_date>2023-05-20 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-20 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>java-巢狀類別</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>94.Binary Tree Inorder Traversal</title>
      <link>http://example.com/94.Binary Tree Inorder Traversal/</link>
      <pubDate>Sun, 21 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-22-94.Binary Tree Inorder Traversal      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="94binary-tree-inorder-traversal">94.Binary Tree Inorder Traversal</h1>

<p>二元樹的中序遍歷  <br />
中序遍歷是左子樹-&gt;根結點-&gt;右子樹</p>

<p><img src="https://images2.imgbox.com/aa/89/N7gfBT4k_o.jpg?download=true" alt="94_1" /></p>

<p><img src="https://images2.imgbox.com/6d/c0/UEU4kcnJ_o.jpg?download=true" alt="94_2" /></p>

<p>走訪的原則是一直往左子樹走，直到沒有根沒止  <br />
如果到達沒節點的地方  <br />
馬上返回上一個走訪的節點並加入  <br />
然後轉移到右節點  <br />
重複一開的步驟</p>

<p>這個走訪的路程，可以用兩個解法來寫</p>

<ol>
  <li>遞迴  <br />
  遞迴的程式碼滿抽象，不過多多參考我上面畫的圖和文字敘述，會很好理解
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">dfsfor94</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">root</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
   <span class="k">return</span><span class="o">;</span>
  <span class="n">dfsfor94</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
  <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
  <span class="n">dfsfor94</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>堆疊  <br />
  堆疊的原理就是利用後進先出的原理  <br />
  把路徑上可以取得的左子樹先加進堆疊  <br />
  一發現沒有馬上取出節點並接入結果中  <br />
  堆疊有一個比較特別的點，就是停止的條件  <br />
  走訪的root沒有參考或者堆疊為空
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">stack94</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">root</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
 <span class="k">return</span><span class="o">;</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">root</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
 <span class="k">while</span> <span class="o">(</span><span class="n">root</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
   <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
   <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
 <span class="o">}</span>
 <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
 <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
 <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>
]]>
      </content:encoded>
      <wp:post_id>23</wp:post_id>
      <wp:post_date>2023-05-21 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-21 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>94.Binary Tree Inorder Traversal</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>27.Remove Element</title>
      <link>http://example.com/Remove Element/</link>
      <pubDate>Tue, 23 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-23-Remove Element      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="27remove-element">27.Remove Element</h1>

<p>給你一個數組 nums 和一個值 val，你需要 原地 移除所有數值等於 val 的元素，並返回移除後數組的新長度。</p>

<p>不要使用額外的數組空間，你必須僅使用 O(1) 額外空間並 原地 修改輸入數組。</p>

<p>元素的順序可以改變。你不需要考慮數組中超出新長度後面的元素。</p>

<p>意思你要在本地修改陣列，nums剩下size與本來的長度不一樣不重要了，直接回傳新的長度</p>

<h1 id="example">Example</h1>

<p>Input: nums = [0,1,2,2,3,0,4,2], val = 2  <br />
Output: 5, nums = [0,1,4,0,3,<em>,</em>,_]</p>

<h1 id="思考">思考</h1>

<p>想確認陣列的每個數字，一定要一個完整的for loop  <br />
這個是指針i</p>

<p>還要得到新的的陣列長度  <br />
這個是指針k  <br />
根據題意，k增加的條件是找出非val的數值  <br />
nums[i] != val  <br />
如果是true，nums[k++] = nums[i]</p>

<h1 id="程式">程式</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">removeElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">val</span><span class="o">){</span>
          <span class="n">nums</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
      <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">k</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
]]>
      </content:encoded>
      <wp:post_id>24</wp:post_id>
      <wp:post_date>2023-05-23 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-23 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>Remove Element</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>spring boot-JPA的一對一關聯</title>
      <link>http://example.com/spring boot-JPA的一對一關聯/</link>
      <pubDate>Tue, 23 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="spring boot">
        <![CDATA[spring boot]]>
      </category>
      <guid isPermaLink="false">
jekyll-24-spring boot-JPA的一對一關聯      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="spring-boot-jpa的一對一關聯">spring boot-JPA的一對一關聯</h1>

<p>首先，使用方便測試的H2</p>

<p>pom.xml:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>



</code></pre></div></div>

<p>application.properties:<br />
spring.datasource.url=jdbc:h2:mem:testdb</p>

<p>要設計的Schema是</p>

<p>User1 &lt;- Address 一對一</p>

<table>
  <thead>
    <tr>
      <th>User1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
    </tr>
    <tr>
      <td>name</td>
    </tr>
    <tr>
      <td>address_id</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
    </tr>
    <tr>
      <td>address</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User1</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User1</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@OneToOne</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"address_id"</span><span class="o">,</span> <span class="n">referencedColumnName</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User1</span><span class="o">(){}</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Address</span><span class="o">(</span><span class="nc">String</span> <span class="n">address</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">Address</span><span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>@OneToOne(cascade = CascadeType.ALL)  <br />
對於這實體的關聯操作，CascadeType.ALL表示任何操作當會影響到另一個一對一實體</p>

<p>@JoinColumn(name = “address_id”, referencedColumnName = “id”)  <br />
name的值是會在此資料表設立一個address_id外鍵  <br />
referencedColumnName是對對象Entity也就是address的id 作為參考</p>

<h2 id="關於外鍵的位置">關於外鍵的位置</h2>
<p>我有思考過把外鍵放到address會如何，也是可以work  <br />
不過有一個問題是  <br />
User1的實體會沒有外鍵的資料，會使的操作比較麻煩，但有補救的方法</p>

<p>使用OneToOne的屬性mappedBy  <br />
就可以讓欄位有關聯的反向端獲得參考</p>

<p>再看看官方JoinColumn name的說明  <br />
If the join is for a OneToOne or ManyToOne mapping using a foreign key mapping strategy,  <br />
the foreign key column is in the table of the source entity or embeddable.</p>

<p>source entity上述沒有說是什麼  <br />
根據我的判斷指的是關聯資料表to的左邊，OnetoOne左邊放外鍵也會比較方便</p>

<h2 id="程式碼">程式碼</h2>

<p>Controller</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCtrl</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AddressRepository</span> <span class="n">addressRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">User1Repository</span> <span class="n">user1Repository</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">MyCtrl</span><span class="o">(</span><span class="nc">AddressRepository</span> <span class="n">addressRepository</span><span class="o">,</span> <span class="nc">User1Repository</span> <span class="n">user1Repository</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">addressRepository</span> <span class="o">=</span> <span class="n">addressRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">user1Repository</span> <span class="o">=</span> <span class="n">user1Repository</span><span class="o">;</span>
        <span class="nc">User1</span> <span class="n">u1</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">user1Repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">User1</span><span class="o">(</span><span class="s">"Lee"</span><span class="o">));</span>
        <span class="nc">Address</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">addressRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">(</span><span class="s">"Taipei"</span><span class="o">));</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">d1</span><span class="o">;</span>
        <span class="n">user1Repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">u1</span><span class="o">);</span>

        <span class="n">addressRepository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
        <span class="n">user1Repository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Repository</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">User1Repository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">User1</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{}</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AddressRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div></div>
<p>經過上面的設定，已經有外鍵限制了</p>

<p>addressRepository.deleteById(“1”);  <br />
這一行就會有錯誤，因為限制</p>

<p>user1Repository.deleteById(“1”);  <br />
這一行執行完，不只user1會被刪掉，關聯的address也會一起被刪掉</p>

]]>
      </content:encoded>
      <wp:post_id>25</wp:post_id>
      <wp:post_date>2023-05-23 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-23 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>spring boot-JPA的一對一關聯</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>依賴反轉原則</title>
      <link>http://example.com/依賴反轉原則/</link>
      <pubDate>Tue, 23 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="OOP">
        <![CDATA[OOP]]>
      </category>
      <guid isPermaLink="false">
jekyll-25-依賴反轉原則      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="依賴反轉原則">依賴反轉原則</h1>

<p>教室裡有學生要唸課文  <br />
最直接的想法是定義一個教室的類別  <br />
在教室裡面安排學生唸課文  <br />
非常的直覺</p>

<p>教室是高階組件  <br />
學生是低階組件  <br />
高階組件需要低階組件幫它完成任務</p>

<h2 id="依賴的缺點">依賴的缺點</h2>

<ol>
  <li>耦合性高  <br />
教室會高度依賴學生，學生簡直是為了教室而存在</li>
  <li>違反開放封閉原則  <br />
要換另外一位學生，那你是一定要修改程式，這樣容易出錯</li>
</ol>

<h2 id="設計原則">設計原則</h2>
<p>依賴抽象，不要依賴具體類別</p>

<p>意思是解除高階組件對低階組件的依賴  <br />
兩者同時都要依賴抽象  <br />
但抽象到底是什麼</p>

<p>思考一下，我是老闆，我叫員工小明做事情  <br />
不是因為他小明他才幫我做事，因為他是員工</p>

<h2 id="幾條方針">幾條方針</h2>

<ol>
  <li>盡量不保存物件的參考</li>
  <li>不應該從具體類別衍生</li>
  <li>任何方法不應該覆寫基底類別已經實作的方法</li>
</ol>

<h2 id="對於物件實例化的依賴">對於物件實例化的依賴</h2>

<p>物件在類別裡面實例化，確實不好處理</p>

<p>思考你的物件是不是容易被更換  <br />
如果確定不可能更換，就不用太緊張</p>

<p>如果可能會改變，有幾個做法</p>
<ol>
  <li>工廠模式</li>
  <li>依賴注入</li>
  <li>傳參數</li>
</ol>

<h2 id="code">Code</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Student</span>
<span class="o">{</span>
    <span class="kd">abstract</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Jack</span> <span class="kd">extends</span> <span class="nc">Student</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"jack say"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Jacy</span> <span class="kd">extends</span> <span class="nc">Student</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"jacy say"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Howard</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"howard say"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ClassRoom</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText1</span><span class="o">(</span><span class="nc">Student</span> <span class="n">s</span><span class="o">){</span>
        <span class="n">s</span><span class="o">.</span><span class="na">readText</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readText2</span><span class="o">(){</span>
        <span class="nc">Howard</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Howard</span><span class="o">();</span>
        <span class="n">h</span><span class="o">.</span><span class="na">readText</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>readText1:  <br />
ClassRoom依賴Student  <br />
低階組件也依賴Student  <br />
Student就是這邊的抽象</p>

<p>readText2:  <br />
ClassRoom依賴Howard</p>

<h2 id="總結">總結</h2>
<p>反轉了一般人對物件導向的設計方式  <br />
一般都會由上往下的思考  <br />
這正是反轉了思考模式</p>

]]>
      </content:encoded>
      <wp:post_id>26</wp:post_id>
      <wp:post_date>2023-05-23 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-23 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>依賴反轉原則</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>工廠模式</title>
      <link>http://example.com/工廠模式/</link>
      <pubDate>Fri, 26 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計模式">
        <![CDATA[設計模式]]>
      </category>
      <guid isPermaLink="false">
jekyll-26-工廠模式      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="工廠模式">工廠模式</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Form</span><span class="o">{</span>
  <span class="kd">public</span> <span class="nf">Form</span><span class="o">(){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui3</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="n">ui</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">);</span>
    <span class="n">ui</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">210</span><span class="o">);</span>

    <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Draw</span> <span class="n">draw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Draw1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Draw</span> <span class="n">draw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Draw2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Draw</span> <span class="n">draw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Draw3</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="n">draw</span><span class="o">.</span><span class="na">draw</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>上述很亂的程式在產生ui並設定位置  <br />
產生工具並畫圖</p>

<p>new 用得好好的，為什麼要使用工廠模式</p>
<ol>
  <li>耦合高    <br />
在程式裡面有太多實例化，會讓程式的耦合變高  <br />
這個Form還要維護這些物件的實例化</li>
  <li>拒絕修改  <br />
好不容易把這麼亂的程式碼開發完了    <br />
有一天被告知，需要修改功能  <br />
有新的ui要加入  <br />
還是要打開這亂成一坨的程式碼，冒著失誤的風險</li>
  <li>統整性  <br />
如果只有這邊有使用這些程式碼，已經很煩  <br />
如果好多地方都要修改，那一定是一場地獄</li>
</ol>

<p>最不能接受的還是會一直變動的程式碼  <br />
最好的情況就是開發完那就封存  <br />
我們先把上面這一份程式碼會變動的部分找出來</p>

<h2 id="封裝起來">封裝起來</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// !!這個區域</span>
<span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui1</span><span class="o">();</span>
<span class="o">}</span>
<span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
  <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui2</span><span class="o">();</span>
<span class="o">}</span>
<span class="k">else</span><span class="o">{</span>
  <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui3</span><span class="o">();</span>
<span class="o">}</span>
<span class="c1">// !!這個區域</span>


<span class="n">ui</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">);</span>
<span class="n">ui</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">210</span><span class="o">);</span>

</code></pre></div></div>

<p>上面那段實例化的程式碼是讓我們程式很亂的原因  <br />
修改是必須的</p>

<p>上面的Form就是使用者  <br />
而且可能有更多使用者  <br />
可能你的同事、朋友、還是其他人  <br />
每次碰到這段程式碼都要維護很不現實的</p>

<h2 id="簡單工廠模式">簡單工廠模式</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui3</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>這樣子就可以先解決眾多使用者們的問題  <br />
這個類別也不只只能產生Ui物件  <br />
例如有些有多語系的問題  <br />
也可以在這邊都弄完  <br />
並且幫助用戶把令人繁雜的實例化程式清除了</p>

<h3 id="靜態的簡單工廠">靜態的簡單工廠</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Ui3</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>這樣寫也可以  <br />
這樣可以確保你在任何時刻都可以直接使用工廠  <br />
不用實例化工廠  <br />
缺點就是失去了彈性  <br />
你無法繼承createUi的行為，做出更符合你想要的行為</p>

<h2 id="簡單工廠的不足之處">簡單工廠的不足之處</h2>
<p>簡單工廠非常方便好用，但其實它不是設計模式  <br />
只是很直覺常用的寫法</p>

<p>現在的UI不可能只有一種風格  <br />
可能有fancy花俏的，古典classical</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi3</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="nc">FancyUiFactory</span> <span class="n">fancyUiFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUiFactory</span><span class="o">();</span>
<span class="nc">ClassicalUiFactory</span> <span class="n">classicalUiFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassicalUiFactory</span><span class="o">();</span>
</code></pre></div></div>
<p>直接分別定義兩個簡單工廠的類別，仔細思考，缺少一種範本Template的感覺</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">uiType</span> <span class="o">==</span> <span class="err">"</span><span class="n">fancy</span><span class="o">){</span>
  <span class="n">ui</span> <span class="o">=</span> <span class="n">fancyUiFactory</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
<span class="o">}</span>
<span class="k">else</span><span class="o">{</span>
  <span class="n">ui</span> <span class="o">=</span> <span class="n">fancyUiFactory</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">ui</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">);</span>
<span class="n">ui</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">210</span><span class="o">);</span>
<span class="n">ui</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
<span class="n">ui</span><span class="o">.</span><span class="na">changeColor</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">210</span><span class="o">);</span>
</code></pre></div></div>
<p>想要標準化這個流程<br />
可以讓不同的Ui風格都可以套用這個template  <br />
而且還有一定的流程控管，這樣才可以成為一個稱職的工廠</p>

<h2 id="標準化流程">標準化流程</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">UiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="nc">Ui</span> <span class="nf">getUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">position</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">color</span><span class="o">){</span>
    
    <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="n">createUi</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
    <span class="n">ui</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>  
    <span class="n">ui</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">abstract</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>把工廠改成抽象類就可以去執行Template的任務了  <br />
因為抽象類不可以實例化，所以你必須去繼承類別</p>

<p>並且createUi 也是抽象方法，為什麼?<br />
可以強迫繼承的子類別去實作這個方法</p>

<h2 id="子類別決定是什麼風格的ui">子類別決定是什麼風格的UI</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUiFactory</span> <span class="kd">extends</span> <span class="nc">UiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi1</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi2</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
      <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyUi3</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>這樣不管是Fancy還是Classical或其他等等  <br />
都可以實作自己的方法，產生相對應風格的UI  <br />
並且能維持我們想要的流程</p>

<h2 id="程式如何運行">程式如何運行</h2>
<p>以基礎類別UiFactory來說  <br />
定義了一個createUi的方法</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="n">createUi</span><span class="o">(</span><span class="n">type</span><span class="o">);</span> 
</code></pre></div></div>
<p>這行沒有使用任何具體類別的new去實例化，代表與Ui具體類解耦合  <br />
並且多型的接受一個Ui，不會知道是哪一個風格的Ui會被製作</p>

<p>那是在哪時候知道被製作UI的風格的呢?  <br />
當<u>子類別</u>完成繼承的時候已經決定好了  <br />
因為你無法在Fancy的工廠要求產出Classical風格的UI</p>

<h2 id="回頭設計ui">回頭設計UI</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">UI</span><span class="o">{</span>
  <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
  <span class="nc">Frame</span> <span class="n">frame</span><span class="o">;</span> <span class="c1">//UI外框</span>
  <span class="nc">Font</span> <span class="n">font</span><span class="o">;</span>
  <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">();</span>
  <span class="kt">void</span> <span class="nf">setPosition</span><span class="o">(</span><span class="kt">int</span> <span class="o">[]</span> <span class="n">position</span><span class="o">){</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">setColor</span><span class="o">(</span><span class="kt">int</span> <span class="o">[]</span> <span class="n">color</span><span class="o">){</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//工廠框架也要修正</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">UiFactory</span><span class="o">{</span>

  <span class="kd">public</span> <span class="nc">Ui</span> <span class="nf">getUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">position</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">color</span><span class="o">){</span>
    <span class="nc">Ui</span> <span class="n">ui</span> <span class="o">=</span> <span class="n">createUi</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
    <span class="n">ui</span><span class="o">.</span><span class="na">init</span><span class="o">()</span>  <span class="c1">//初始化UI</span>
    <span class="n">ui</span><span class="o">.</span><span class="na">setPosition</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>  
    <span class="n">ui</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">abstract</span> <span class="nc">Ui</span> <span class="nf">createUi</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用抽象方法createUi回傳一個UI變數，讓子類別去實作  <br />
使用抽象方法init讓UI類別去實作各自需要的需求<br />
接下來來是設計等待以久的風格UI</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUi1</span> <span class="kd">extends</span> <span class="no">UI</span><span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(){</span>
    <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFrame</span><span class="o">();</span>
    <span class="n">font</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFont</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 古典風格的一樣步驟</span>
</code></pre></div></div>
<p>去實作init得到相對應的frame和font，大功告成</p>

<h2 id="工廠模式介紹">工廠模式介紹</h2>
<p>工廠模式包含兩種類型的類別</p>

<ol>
  <li>建立者(Cretor)  <br />
UiFactory是基礎類別  <br />
有兩個繼承它的子類別，Fancy和Classical</li>
  <li>產品(Product)  <br />
UI是基礎類別<br />
一樣對應健立者的類別  <br />
不過各個類型產品，可以有多個，如FancyBlue，FancyCart</li>
</ol>

<p>所有工廠模式都會將<u>建立物件的方法封裝起來</u>，透過子類別來實作工廠方法更有彈性</p>

<p>維基百科的解釋；</p>
<blockquote>
  <p>工廠方法模式（英語：Factory method pattern）是一種實現了「工廠」概念的物件導向設計模式。就像其他建立型模式一樣，  <br />
它也是處理在不指定物件具體類型的情況下建立物件的問題。工廠方法模式的實質是「定義一個建立物件的介面，但讓實現這個介  <br />
面的類來決定實例化哪個類。工廠方法讓類別的實例化推遲到子類中進行。」</p>
</blockquote>

<h2 id="ui產品還是有問題">UI產品還是有問題</h2>
<p>UI工廠已經是一個很靈活的框架，而且設計良好  <br />
但UI產品沒有，因為沒有給它一個明確的規範</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUi1</span> <span class="kd">extends</span> <span class="no">UI</span><span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(){</span>
    <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFrame</span><span class="o">();</span>
    <span class="n">font</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFont</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>上面的程式碼實例化與實體類別耦合  <br />
現在希望做的事情  <br />
可以讓產品內部的實例化與與產品本身解耦合</p>

<h2 id="思考一下ui產品">思考一下UI產品</h2>
<p>這邊有兩個風格的UI，Fancy、Classical  <br />
底下各有三個產品  <br />
它們應該會有各自的font與frame等等，才可以組成不同的風格  <br />
所以用介面把這兩個包裝起來</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UiProductFactory</span><span class="o">{</span>
  <span class="nc">Font</span> <span class="nf">createFont</span><span class="o">();</span>
  <span class="nc">Frame</span> <span class="nf">CreateFrame</span><span class="o">();</span>

<span class="o">}</span>
</code></pre></div></div>
<h2 id="組建ui產品的工廠">組建UI產品的工廠</h2>
<p>先實作剛剛準備好的介面，限制類別一定要實作font和frame的方法</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUIFactory</span> <span class="kd">implements</span> <span class="nc">UiProductFactory</span><span class="o">{</span>
  <span class="kd">public</span> <span class="nc">Font</span> <span class="nf">createFont</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FancyFont</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="nc">Frame</span> <span class="nf">createFrame</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FancyFrame</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="與ui產品做結合">與UI產品做結合</h2>
<p>現在我們希望做到的事情是可以幫目前的UI產品解耦合</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUi1</span> <span class="kd">extends</span> <span class="no">UI</span><span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(){</span>
    <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFrame</span><span class="o">();</span>
    <span class="n">font</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FancyFont</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>不管是fancy或者Classical風格  <br />
唯一個差別就是new frame和new font的類別不一樣而已</p>

<p>可以使用介面統約定這兩個方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FancyUi1</span> <span class="kd">extends</span> <span class="no">UI</span><span class="o">{</span>
  <span class="nc">UiProductFactory</span> <span class="n">uiFactory</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">FancyUi</span><span class="o">(</span><span class="nc">UiProductFactory</span> <span class="n">uiFactory</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">uiFactory</span> <span class="o">=</span> <span class="n">uiFactory</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(){</span>
    <span class="n">frame</span> <span class="o">=</span> <span class="n">uiFactory</span><span class="o">.</span><span class="na">createFrame</span><span class="o">();</span>
    <span class="n">font</span> <span class="o">=</span> <span class="n">uiFactory</span><span class="o">.</span><span class="na">createFont</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如此就可以消除掉剛剛類別與UI實例化的耦合  <br />
可以更有彈性了</p>

<h2 id="抽象工廠">抽象工廠</h2>
<p>剛剛的稱為抽象工廠</p>

<p>參考維基百科的解釋</p>
<blockquote>
  <p>抽象工廠模式提供了一種方式，可以將一組具有同一主題的單獨的工廠封裝起來。在正常使用中，客戶端程式需要建立抽象工廠的具體實現，  <br />
然後使用抽象工廠作為介面來建立這一主題的具體物件。客戶端程式不需要知道（或關心）它從這些內部的工廠方法中獲得物件的具體類型，  <br />
因為客戶端程式僅使用這些物件的通用介面。</p>
</blockquote>

<p>間單的說提供介面來建立產品的家族  <br />
介面就是指這一個</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UiProductFactory</span><span class="o">{</span>
  <span class="nc">Font</span> <span class="nf">createFont</span><span class="o">();</span>
  <span class="nc">Frame</span> <span class="nf">CreateFrame</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>這樣的設計很好的幫我們解決了耦合的問題，更有彈性  <br />
這樣就可以很輕易的替換產品的工廠，產品並不知材料是哪一間工廠提供的  <br />
而我們就可以根據不同的狀況使用不同的工廠，來獲得不同的行為了</p>

]]>
      </content:encoded>
      <wp:post_id>27</wp:post_id>
      <wp:post_date>2023-05-26 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-26 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>工廠模式</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>觀察者模式</title>
      <link>http://example.com/觀察者模式/</link>
      <pubDate>Tue, 30 May 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計模式">
        <![CDATA[設計模式]]>
      </category>
      <guid isPermaLink="false">
jekyll-27-觀察者模式      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="觀察者模式">觀察者模式</h1>
<p>Youtube，IG，FB等等很多社群平台，可以讓人訂閱、追蹤     <br />
觀察者模式就是類似於這種的模式，是一對多的關係  <br />
Youtuberc或網紅可以把最新的消息發送給粉絲們</p>

<p>Youtuber有兩個方法  <br />
updateData是Youtuber每次有更新都會呼叫的方法  <br />
getVedio與getArticle是getter方法</p>

<table>
  <thead>
    <tr>
      <th>Youtuber</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>getVedio</td>
    </tr>
    <tr>
      <td>getArticle</td>
    </tr>
    <tr>
      <td>updateData</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Youtuber</span><span class="o">{</span>
  <span class="c1">//others code</span>
  <span class="nc">Fan</span><span class="o">[]</span> <span class="n">fans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Fans</span><span class="o">[]{</span><span class="c1">//code};;</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateData</span><span class="o">(){</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fans</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">fans</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">updateVedio</span><span class="o">(</span><span class="n">getVedio</span><span class="o">());</span>
      <span class="n">fans</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">updateArticle</span><span class="o">(</span><span class="n">getArticle</span><span class="o">());</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>關於粉絲數組，程式可以優化成可變動的數組，可以增加一些彈性</p>

<p>目前程式有一些缺點</p>
<ol>
  <li>針對具體開發，不是針對介面</li>
  <li>粉絲有新的資料想要，都必須再次改動上述程式</li>
</ol>

<h2 id="觀察者模式簡介">觀察者模式簡介</h2>
<p>有兩個角色</p>
<ul>
  <li>Youtuber就是發佈者，稱為對象(SUBJECT)</li>
  <li>觀眾是觀察者(OBSERVER)</li>
</ul>

<p>對象物件一個對多個觀察者物件  <br />
每個消息改變時都會通知所有觀察者訊息</p>

<p>透過註冊，可以讓物件成為觀察者物件  <br />
也可以取消註冊，可以使移出觀察者名單  <br />
跟我們退訂Youtuber一樣，不會再接收到訊息</p>

<h2 id="觀察者模式類別圖">觀察者模式類別圖</h2>

<p><img src="https://images2.imgbox.com/e4/ce/7vqccL2U_o.png?download=true" alt="11" /></p>

<p>唯一有資料的是subject  <br />
Observe有很多個，但沒資料</p>

<p>唯一有影片的是Youtuber  <br />
觀眾很多個，但沒影片，需要Youtuber推送給他們</p>

<h2 id="改變了什麼">改變了什麼</h2>

<p>剛剛上面寫的Fan粉絲，就要去實作OBSERVER  <br />
這樣不管是不是粉絲，還是不小心點到追蹤的老王，Youtuber都可以透過Update方法通知各位，很棒吧</p>

<p>Youtuber只要透過型態為OBSERVER的可變數組，就可以輕鬆的管理全部訂閱用戶    <br />
Youtuber也要實作SUBJECT，這樣子訂閱戶不只可以訂閱老高，年輕高也可以喔<br />
這樣子我們一開始實作的缺點耦合，就很鬆了</p>

<p>而且因為透過OBSERVER介面，會規定它們必須實作的方方法，就算以後訂閱戶需要新的資料<br />
也可以比較安全的完成變動</p>

<h2 id="不只如此">不只如此</h2>
<p>由於SUBJECT是唯一有資料的   <br />
資料肯定都是私有的</p>

<p>OBSERVER想要資料都要透過SUBJECT推送   <br />
有可能會有OBSERVER想要額外資料的時候，在不改變update的前提之下  <br />
也是可以增加public的getter方法讓OBSERVER拉取資料</p>

<p>這中間的取捨，就交給自己決定了</p>

]]>
      </content:encoded>
      <wp:post_id>28</wp:post_id>
      <wp:post_date>2023-05-30 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-05-30 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>觀察者模式</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>命令模式</title>
      <link>http://example.com/命令模式/</link>
      <pubDate>Sat, 03 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計模式">
        <![CDATA[設計模式]]>
      </category>
      <guid isPermaLink="false">
jekyll-28-命令模式      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="命令模式">命令模式</h1>
<p>命令模式是一種封裝的用法    <br />
具體上封裝的東西是方法</p>

<p>例如<br />
媽媽請你去打掃，那嬤嬤不用知道妳具體上怎麼打掃  <br />
寄送包裹，中間發生什麼事情不知道，最後就是會到達目的地  <br />
按下遙控器，不知道具體怎麼動作，重點是電視就是會開機</p>

<h2 id="解析命令的組成">解析命令的組成</h2>

<p>以去郵局寄包裹的流程來說明</p>

<ol>
  <li>要先填寄送單</li>
  <li>櫃員接受單子</li>
  <li>郵差送信</li>
</ol>

<p>以媽媽請我們打掃的流程</p>

<ol>
  <li>媽媽說要打掃哪裡</li>
  <li>你接收訊息</li>
  <li>找一個時間去打掃</li>
</ol>

<h2 id="以命令模式來解釋">以命令模式來解釋</h2>

<ul>
  <li>Client  客戶，產生命令的物件</li>
  <li>Command 命令，被Client產生的物件，包含Receiver與執行的動作</li>
  <li>Invoker 呼叫者，實際上呼叫命令的物件，可以設定要執行的command</li>
  <li>Receiver 接收者，實際上執行動作的物件</li>
  <li>Execute 執行的動作，Command的方法，Receiver要執行的動作會封裝在這個地方</li>
</ul>

<p>以打掃來想像來理解的話  <br />
媽媽在這邊就是Client，依照她的Command命令於是就產生   <br />
Command裡面包含Receiver就是你與要打掃的動作  <br />
媽媽也身兼Invoker呼叫者，把她剛剛想好的Command設定好  <br />
然後她就喊一聲趕快去掃(Command.execute())  <br />
被封裝在裡面的你(Receiver)，就要乖乖的去打掃了</p>

<h2 id="命令模式的類別圖">命令模式的類別圖</h2>

<p><img src="https://images2.imgbox.com/99/dc/tmBTPsqI_o.jpg?download=true" alt="1" /></p>

<h2 id="命令不只有一個">命令不只有一個</h2>

<p>現實的情況是，正常命令不會只有一個  <br />
通常媽媽請你打掃不會只負責一個區域會者永遠掃地就好</p>

<p>可以把Invoker裡面的Command宣告成陣列</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nf">MomCtrl</span><span class="o">(){</span>
  <span class="nc">Command</span><span class="o">[]</span> <span class="n">commands</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">MonCtrl</span><span class="o">(){</span>
    <span class="n">commands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="n">inti</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
      <span class="c1">//code</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="命令初始化的問題">命令初始化的問題</h2>

<p>當Invoker裡面的Command如果還沒有設定，是沒有值的  <br />
如果每次都要判斷是不是null</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">command</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
  <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>這個不是一個聰明的方法  <br />
可以幫這一個物件設計一個沒有任何行為的物件</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoCommand</span> <span class="kd">implements</span> <span class="nc">Command</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exccute</span><span class="o">(){}</span>
<span class="o">}</span>
<span class="c1">//剛剛MomCtrl的程式碼就可以寫成這樣</span>

<span class="kd">public</span> <span class="nf">MonCtrl</span><span class="o">(){</span>
    <span class="n">commands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">Command</span> <span class="n">noCommand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">();</span>
    <span class="k">for</span><span class="o">(</span><span class="n">inti</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
      <span class="n">commands</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>

</code></pre></div></div>
<p>如此就可以避免if null的問題</p>

]]>
      </content:encoded>
      <wp:post_id>29</wp:post_id>
      <wp:post_date>2023-06-03 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-03 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>命令模式</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>95.Unique Binary Search Trees II</title>
      <link>http://example.com/95.Unique Binary Search Trees II/</link>
      <pubDate>Thu, 08 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-29-95.Unique Binary Search Trees II      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="95unique-binary-search-trees-ii">95.Unique Binary Search Trees II</h1>
<p>這一題給n，把n所有的樹列出來<br />
n=3, 要把如下五顆樹全部找到<br />
<img src="https://images2.imgbox.com/9e/86/zeDabYvq_o.jpg?download=true" alt="1" /></p>

<p>這題要用回朔法，重點思考是  <br />
以i來假設尋訪的樹根  <br />
左邊小於樹根 (1, i-1…..)  <br />
右邊大於樹根  (i+1…., n)  <br />
一直列舉，直到左子樹大於右子樹的時候停下來</p>

<p>然後在進行回朔時，每次回朔都要把該起點的樹全部存起來  <br />
以上圖的1為例子的話  <br />
左邊就是 null  <br />
右邊有兩顆樹，2-&gt;3，3-&gt;2  <br />
然後互相去交錯就可以得到根為1全部的樹</p>

<p>核心思考是從樹的最深層葉子從後想到根部</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="nf">generate95</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">){</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">trees</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="o">){</span> 
      <span class="n">trees</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">trees</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">//start 從一開始  所以end是 &lt;=</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">left</span> <span class="o">=</span> <span class="n">generate95</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//壓縮樹的空間直到結束</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">right</span> <span class="o">=</span> <span class="n">generate95</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>  <span class="c1">//壓縮樹的空間直到結束</span>
      <span class="k">for</span> <span class="o">(</span><span class="nc">TreeNode</span> <span class="n">l</span> <span class="o">:</span> <span class="n">left</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">//左右子樹的交互</span>
          <span class="k">for</span> <span class="o">(</span><span class="nc">TreeNode</span> <span class="n">r</span> <span class="o">:</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
              <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
              <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
              <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
              <span class="n">trees</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
          <span class="o">}</span>
      <span class="o">}</span>

  <span class="o">}</span>
  <span class="k">return</span> <span class="n">trees</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="nf">generateTrees</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">generate95</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
]]>
      </content:encoded>
      <wp:post_id>30</wp:post_id>
      <wp:post_date>2023-06-08 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-08 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>95.Unique Binary Search Trees II</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>96.Unique Binary Search Trees</title>
      <link>http://example.com/96.Unique Binary Search Trees/</link>
      <pubDate>Thu, 08 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-30-96.Unique Binary Search Trees      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="96unique-binary-search-trees">96.Unique Binary Search Trees</h1>

<p>這題是動態規劃的題目，因為自己看不懂自己寫的，慚愧做個紀錄  <br />
題意是給你n，要回傳n有幾個獨一無二的二元樹</p>

<p>已經知道如果n=1, ans=1  <br />
n=2, ans=2  <br />
n=3, ans=5  <br />
n=4, ans=? 4就比較難直接想出來了</p>

<p>可以看看下面的圖</p>

<p><img src="https://images2.imgbox.com/86/8c/6f5pfPmp_o.jpg?download=true" alt="1" /></p>

<p>第一行的數字代表樹的根  <br />
第二行的數字代表展開的樹高</p>

<p>以n=4來觀察  <br />
以1來說，一定是任何數字都比它大，其他的樹一定是在右邊  <br />
以4來說，一定是任何數字都比它小其他的樹一定是在左邊  <br />
以2來說，左邊的樹高是1，右邊的樹高是2  <br />
然後左右的樹互乘，就可以得到此根所擁有的獨一無二的二元樹</p>

<p>然後這邊必須把高度是0的樹，用1去乘，為了方便做計算</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">numTrees</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">)];</span> <span class="c1">//n+1 因為索引0已經拿來計算用了  </span>
  <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">//給1為了方便計算</span>
  <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
  <span class="n">nums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="o">)</span>
      <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

  <span class="kt">int</span> <span class="n">count</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">//這邊除以2，因為樹是對稱的，不用把後半繞完</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">++]</span> <span class="o">*</span> <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">--];</span>
      <span class="o">}</span>
      <span class="n">count</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">//因為剛剛只有算一半，乘回來</span>
      <span class="k">if</span><span class="o">(((</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)&amp;</span><span class="mi">1</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span> <span class="c1">//遇到如果是奇數的樹，就不對稱了，要把中間的根乘兩次</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">nums</span><span class="o">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">],</span> <span class="mi">2</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
      
<span class="o">}</span>

</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>31</wp:post_id>
      <wp:post_date>2023-06-08 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-08 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>96.Unique Binary Search Trees</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>97.Interleaving String</title>
      <link>http://example.com/97.Interleaving String/</link>
      <pubDate>Tue, 13 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <guid isPermaLink="false">
jekyll-31-97.Interleaving String      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="97interleaving-string">97.Interleaving String</h1>

<p>這題要判斷兩個字串交錯後 是否等於第三個字串</p>

<p><img src="https://images2.imgbox.com/39/80/XzHyhR1q_o.jpg?download=true" alt="" /></p>

<h3 id="雙指針">雙指針</h3>
<p>直覺會使用雙指針來解  <br />
如果這題使用雙指針來解的話，會遇到一個問題  <br />
如 s1=a, s2=abc, s3=abca  <br />
從s1開始移動是False  <br />
從s2開始移動是True  <br />
這樣會很難決定從哪邊開始移動</p>

<h3 id="動態規劃">動態規劃</h3>
<p>這題的正解是動態規劃，只是不太直覺</p>

<p><img src="https://images2.imgbox.com/a5/0d/AvuG5KsB_o.jpg?download=true" alt="" /></p>

<p>以上面的例子來說的話，總共有十個數字<br />
題意要交錯  <br />
用雙迴圈可以把每個點都走到，一定可以完成交錯的條件  <br />
每次的步數只能</p>
<ol>
  <li>i+1</li>
  <li>j+1</li>
</ol>

<p>每次都去確認雙迴圈的值  <br />
如果是左列的數字一樣，那就去判斷[i-1, j]的值  <br />
如果是上列的數字一樣，那就去判斷[i, j-1]的值  <br />
如果是True代表是已經走過的點。如果是False代表是沒有走過的點  <br />
如此就可以重複利用之前走的點，幫助判斷</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInterleave1</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s3</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span><span class="o">[][]</span> <span class="n">dq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="mi">1</span><span class="o">][</span><span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="mi">1</span><span class="o">];</span>
  <span class="n">dq</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">s3</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="n">flag</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// &lt;= 是因為沒前綴的初始值是1，索引是0，所以要多loop一次</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
          <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
          <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
              <span class="n">flag</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span> <span class="o">==</span> <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
              <span class="n">dq</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">|=</span> <span class="n">dq</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">flag</span><span class="o">;</span> <span class="c1">// |= 是因為 i or j 任何一個是1就是1</span>
          <span class="o">}</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
              <span class="n">flag</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span> <span class="o">==</span> <span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
              <span class="n">dq</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">|=</span> <span class="n">dq</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">flag</span><span class="o">;</span>
          <span class="o">}</span>
      <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">dq</span><span class="o">[</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>後來發現此題有更高的要求，要O(s2.length)的空間複雜度  <br />
目前的複雜度是  <br />
時間 O(nm)  <br />
空間 O(nm)</p>

<p>我去看了題目的解析</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInterleave2</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s3</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span><span class="o">[]</span> <span class="n">dq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
  <span class="n">dq</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">s3</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="n">flag</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
          <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">flag</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span> <span class="o">==</span> <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
              <span class="n">dq</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dq</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">flag</span><span class="o">;</span>    <span class="c1">//  拿掉了|，因為dq已經剩下一維陣列</span>
          <span class="o">}</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">flag</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span> <span class="o">==</span> <span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">((</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
              <span class="k">if</span> <span class="o">(</span><span class="n">dq</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">dq</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&amp;</span> <span class="n">flag</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
                  <span class="n">dq</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
              <span class="k">else</span>
                  <span class="n">dq</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
          <span class="o">}</span>
      <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">dq</span><span class="o">[</span><span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">()]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>核心的理念是  <br />
每次只要i loop一次，那個dq就會得到一次最新的值  <br />
直到loop到最後一次，dq 就等於之前的 dq[s1.length()]</p>

]]>
      </content:encoded>
      <wp:post_id>32</wp:post_id>
      <wp:post_date>2023-06-13 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-13 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>97.Interleaving String</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>Word筆記</title>
      <link>http://example.com/Word筆記/</link>
      <pubDate>Sun, 18 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="word">
        <![CDATA[word]]>
      </category>
      <guid isPermaLink="false">
jekyll-32-Word筆記      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="word筆記">Word筆記</h1>

<h2 id="列印">列印</h2>
<p>列印背景色彩</p>
<ol>
  <li>檔案</li>
  <li>選項</li>
  <li>顯示</li>
  <li>列印背景色彩及影像</li>
</ol>

<h2 id="圖片">圖片</h2>
<p>文繞圖注意事項<br />
如果是使用矩形，圖片會被當成文字</p>

<h2 id="文字方塊">文字方塊</h2>
<p>格式的地方可以修改文字對齊方式</p>

<h2 id="表格">表格</h2>
<p>shift+alt 上下 左右 可以操控某一個資料移動</p>

<p>右下角拖曳可以修改整體表格大小</p>

<p>表格文字的對齊<br />
是在版面配置裡面</p>

<p>裡面的tab 要使用 Ctrl+TAB 不然會跳到下一個去</p>

<p>表格的左上角點擊左鍵，可以開啟快速功能列  <br />
有幾個實用的功能</p>
<ol>
  <li>自動調整(寬度之類的)</li>
</ol>

<h2 id="格線">格線</h2>
<p>滿面配置-&gt; 對齊</p>

<h2 id="分頁">分頁</h2>
<p>讓每頁的表格都有標題頁面<br />
版面配置 -&gt; 重複標題列</p>

<h2 id="公式">公式</h2>
<p>可以套用簡單公式<br />
版面配置 -&gt; 公式</p>

<h2 id="尺標">尺標</h2>
<p>控制縮排與凸排使用</p>

]]>
      </content:encoded>
      <wp:post_id>33</wp:post_id>
      <wp:post_date>2023-06-18 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-18 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>Word筆記</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>Python 可變物件與不可變物件</title>
      <link>http://example.com/Python 可變物件與不可變物件/</link>
      <pubDate>Sat, 24 Jun 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="python">
        <![CDATA[python]]>
      </category>
      <guid isPermaLink="false">
jekyll-33-Python 可變物件與不可變物件      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="python-可變物件與不可變物件">Python 可變物件與不可變物件</h1>

<p>python的物件被分為</p>
<ol>
  <li>可變物件</li>
  <li>不可變物件</li>
</ol>

<p>當你對可變物件修改值時，不會改變物件本身的記憶體</p>

<p>對不可變物件修改時，會直接產生新的物件並賦予新的記憶體</p>

<h2 id="可變物件">可變物件</h2>

<ol>
  <li>list</li>
  <li>set</li>
  <li>dict</li>
  <li>class</li>
</ol>

<h3 id="set-example">Set Example</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>

<span class="nf">change</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>

<span class="n">output</span>

<span class="mi">1495543984864</span>
<span class="mi">1495543984864</span>
<span class="mi">1495543984864</span>
<span class="mi">1495543984864</span>
</code></pre></div></div>
<p>去修改時也不會影響Set的記憶體</p>

<h2 id="不可變物件">不可變物件</h2>
<ol>
  <li>int</li>
  <li>string</li>
  <li>float</li>
  <li>tupple</li>
</ol>

<h3 id="int-example">Int Example</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
<span class="nf">count</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">id</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>

<span class="n">output</span> 

<span class="mi">2660491094320</span>
<span class="mi">2660491094320</span>
<span class="mi">2660491094352</span>
<span class="mi">2660491094320</span>
</code></pre></div></div>
<p>可以看到第二個output ID還是一樣</p>

<p>不過只要修改過後，ID就不同了</p>

<p>本來的c也不會受影響</p>

]]>
      </content:encoded>
      <wp:post_id>34</wp:post_id>
      <wp:post_date>2023-06-24 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-06-24 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>Python 可變物件與不可變物件</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>67.Add Binary</title>
      <link>http://example.com/67.Add Binary/</link>
      <pubDate>Sat, 01 Jul 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="leetcode">
        <![CDATA[leetcode]]>
      </category>
      <guid isPermaLink="false">
jekyll-34-67.Add Binary      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="67add-binary">67.Add Binary</h1>

<p>Given two binary strings a and b, return their sum as a binary string.</p>

<h3 id="example-1">Example 1:</h3>

<p>Input: a = “11”, b = “1”　　<br />
Output: “100”</p>

<h3 id="example-2">Example 2:</h3>

<p>Input: a = “1010”, b = “1011”　　<br />
Output: “10101”</p>

<p>題意是相加兩個binary string，回傳一個加好的binary string</p>

<p>要解決3個問題</p>
<ol>
  <li>字串索引從左邊開始，但是binary是從右邊開始加</li>
  <li>binary的進位</li>
  <li>各字元的計算</li>
</ol>

<h3 id="第1">第1</h3>

<p>從兩個字串的尾部開始像前面移動</p>

<p>每次都移動1，移動到 &gt;= 0</p>

<table>
  <thead>
    <tr>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p>以11和01互加會變成 001，所以會需要反轉</p>

<h3 id="第2">第2</h3>

<p>一開始的進位是0</p>

<p>每次都要把此次的計算帶到下一次</p>

<p>並且進為大於0，代表計算還未結束</p>

<h3 id="第3">第3</h3>

<p>字元的計算根據使用的程式語言會有所不同</p>

<ol>
  <li>直接使用字元加</li>
  <li>轉成unicode的數字</li>
</ol>

<h2 id="python-code">Python Code</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">addBinary</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
  <span class="n">len_a</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
  <span class="n">len_b</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
  <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#紀錄進位
</span>  <span class="n">binary</span> <span class="o">=</span> <span class="sh">""</span>
  <span class="k">while</span> <span class="n">len_a</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">len_b</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">carry</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">_sum</span> <span class="o">=</span> <span class="n">carry</span> 
      <span class="n">_sum</span> <span class="o">+=</span> <span class="nf">ord</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">len_a</span><span class="p">])</span> <span class="o">-</span> <span class="mi">48</span> <span class="k">if</span> <span class="n">len_a</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="k">else</span> <span class="mi">0</span>
      <span class="c1"># 轉成 Unicode point - 48 就可以以整數0為基準
</span>      <span class="c1"># python 不能字串相減
</span>      <span class="n">_sum</span> <span class="o">+=</span> <span class="nf">ord</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">len_b</span><span class="p">])</span> <span class="o">-</span> <span class="mi">48</span> <span class="k">if</span> <span class="n">len_b</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="k">else</span> <span class="mi">0</span>
      <span class="n">binary</span> <span class="o">+=</span> <span class="nf">str</span><span class="p">(</span><span class="n">_sum</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
      <span class="n">carry</span> <span class="o">=</span> <span class="n">_sum</span> <span class="o">//</span> <span class="mi">2</span>
      <span class="n">len_a</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="n">len_b</span> <span class="o">-=</span> <span class="mi">1</span>

  <span class="k">return</span> <span class="n">binary</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1">#[start:end:step] 反轉字串
</span>
</code></pre></div></div>
]]>
      </content:encoded>
      <wp:post_id>35</wp:post_id>
      <wp:post_date>2023-07-01 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-07-01 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>67.Add Binary</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>排序演算法</title>
      <link>http://example.com/排序演算法/</link>
      <pubDate>Sun, 02 Jul 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="演算法">
        <![CDATA[演算法]]>
      </category>
      <guid isPermaLink="false">
jekyll-35-排序演算法      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="排序演算法">排序演算法</h1>

<p>介紹五個排序演算法</p>

<ol>
  <li>插入排序</li>
  <li>泡沫排序</li>
  <li>快速排序</li>
  <li>選擇排序</li>
  <li>桶子排序</li>
</ol>

<h2 id="1插入排序">1.插入排序</h2>
<p>(3) ( 2 1 )  <br />
(2 3 ) ( 1 )  <br />
(1   2   3 )</p>

<p>把排列分成已排好和未排好</p>

<p>左邊括弧是已排好  <br />
右邊括弧是未排好</p>

<p>每次都從未排好的第一個數字，向左跟已排好的數字比較  <br />
因為每次都是用一個數子去跟已排序的值比較  <br />
每次循環能確保已排序的值一定是完成排序的</p>

<p>之所以叫插入排序  <br />
估計是需要移動已排序的值，找一個適合的位置把未排序的值插入進去  <br />
很像是玩大老二的時候的思考方法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">insert_sort</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span> <span class="c1">#從一因為大於兩個數字才需要排序
</span>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">tmp_idx</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
      <span class="c1">#不包含0因為，loop時 每次都會去和-1的值比較
</span>      <span class="k">if</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
          <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
          <span class="n">tmp_idx</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span>  <span class="c1">#取得插入值的索引
</span>    <span class="n">data</span><span class="p">[</span><span class="n">tmp_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</code></pre></div></div>

<h2 id="2泡沫排序">2.泡沫排序</h2>

<p>泡沫排序是兩兩交互的值互相比較  <br />
總共loop n-1次，就可以完成排序(註1)  <br />
每個loop要要比較 k-1 次(註2) ，因為是兩個比較要-1</p>

<p>註1. n為數值的總數  <br />
註2. k為每次loop的索引</p>

<p>(3 2)   1  <br />
2 (3    1)  <br />
(2  1)  3   &lt;完成一次比較，得到一個排完的數3&gt;</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
  <span class="c1">#總共loop 陣列長度-1
</span>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="c1">#從目前陣列索引往索引1比較
</span>      <span class="n">tmp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
      <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
      <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>

</code></pre></div></div>

<h2 id="3快速排序">3.快速排序</h2>

<p>快速排序的理念是找一個基準點  <br />
小於基準點的放到左邊，大於基準點的放到右邊  <br />
然後再繼幫排序完的數列再進行更小範圍的快速排序  <br />
直到沒有更小單位的數列為止</p>

<p>(3) 2 1</p>

<p>選3為基準點，選第一或最後都可以，這兩個比較好寫  <br />
因為基準點選前面，所以不可以直接從前面找 &gt;= 3  <br />
不然會計算失敗</p>

<p>從右邊找 &lt; 3，找到1  <br />
從左邊邊找 &gt;= 3，也是找到1</p>

<p>兩值根據基準點交換位置的時候會有兩種狀況</p>
<ol>
  <li>找到的索引一樣，代表這是新的基準點，要與目前的基準點互換</li>
  <li>找到的索引不一樣，兩值交換位置</li>
</ol>

<table>
  <thead>
    <tr>
      <th>3</th>
      <th>2</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td> </td>
      <td>L</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>R</td>
    </tr>
  </tbody>
</table>

<p>1 2 3</p>

<p>再來要對更小的範圍快速排序  <br />
以基準點為中間，左右各切一半</p>

<p>(1 2) (3) ()</p>

<p>(start, L-1) 左邊區塊  <br />
(L+1, end) 右邊邊區塊</p>

<p>如果 起點 &gt;= 終點就結束</p>

<p>註1. start為起始索引，end為結束索引</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="p">:</span>
    <span class="k">return</span>
  <span class="n">base_v</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">start</span><span class="p">]</span>
  <span class="n">L</span> <span class="o">=</span> <span class="n">start</span>
  <span class="n">R</span> <span class="o">=</span> <span class="n">end</span>
  <span class="k">while</span> <span class="n">L</span> <span class="o">!=</span> <span class="n">R</span><span class="p">:</span>
    <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="ow">and</span>  <span class="n">data</span><span class="p">[</span><span class="n">R</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">base_v</span><span class="p">:</span> 
    <span class="c1"># L &lt;= R 比較就沒有意義，而且會讓索引不準確
</span>    <span class="c1"># L和R最多一樣，不會讓 L &gt; R
</span>        <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="ow">and</span>  <span class="n">data</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">base_v</span><span class="p">:</span>
        <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
        <span class="c1"># 以基準點為基準 兩邊交換
</span>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">L</span><span class="p">]</span>
        <span class="n">data</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">R</span><span class="p">]</span>
        <span class="n">data</span><span class="p">[</span><span class="n">R</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
  <span class="c1">#交換基準點
</span>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">L</span><span class="p">]</span>
  <span class="n">data</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">=</span> <span class="n">base_v</span>
  <span class="n">data</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
  <span class="c1">#分段繼續快速排序
</span>  <span class="nf">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="nf">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">L</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="4選擇排序">4.選擇排序</h2>
<p>3 2 1  <br />
假定3是最小的，從2向後比較，找到比自己小的</p>

<p>1 (2 3)  <br />
就可以確定1是最小的，然後往下一個2，重複此項操作</p>

<p>抓取最小的值要n-1次  <br />
互相比較的次數需要 n(n-1)/2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="n">min_v_idx</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
      <span class="c1"># i基礎點，+1索引與基礎點比較
</span>      <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">min_v_idx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
        <span class="n">min_v_idx</span> <span class="o">=</span> <span class="n">j</span>
    <span class="k">if</span> <span class="n">min_v_idx</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
      <span class="n">tmp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
      <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">min_v_idx</span><span class="p">]</span>
      <span class="n">data</span><span class="p">[</span><span class="n">min_v_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>

</code></pre></div></div>

<h2 id="5桶子排序">5.桶子排序</h2>

<p>桶子排序的理念是利用空間來完成排序  <br />
每個數子都有屬於自己的桶子</p>

<p>3 2 1</p>

<table>
  <thead>
    <tr>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>把 3  2  1 放到桶子裡  <br />
然後按照順序，桶子有數值的就輸出值的數量  <br />
這是簡單的解釋，實際上使用會難一些</p>

<p>下面的code是引用自維基百科  <br />
並修改is_sub_bucket -&gt; bucket_level<br />
減少不必要的loop</p>

<p>加上我自己寫的註解</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 修改is_sub_bucket:bool -&gt; bucket_level:int
# 因為到第三層，桶子的值已經是排好的，不需要再去比大小
</span>
<span class="k">def</span> <span class="nf">bucket_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">bucket_level</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
  <span class="k">if</span> <span class="nf">is_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">bucket_level</span><span class="p">):</span>
      <span class="k">return</span>

  <span class="n">bucket_num</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">//</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span>  <span class="n">bucket_level</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">10</span>
  <span class="c1"># 2種狀況
</span>  <span class="c1"># 1 大區塊的桶子
</span>  <span class="c1"># 裡面的數字最大如果有100，拆分100個體積太大
</span>  <span class="c1"># 所以除以10
</span>  <span class="c1"># +1 是因為 0~9一組 依此類推，100就需要+1的桶子去裝
</span>  <span class="c1"># 2 小區塊的桶子
</span>  <span class="c1"># 大小固定是 10，因為大區塊是 0~9一組
</span>  <span class="c1"># 小區塊是大區塊再繼續去拆分的
</span>
  <span class="n">buckets</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">list</span><span class="p">]</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">bucket_num</span><span class="p">)]</span>

  <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
    <span class="n">i</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">a</span> <span class="o">//</span> <span class="mi">10</span> <span class="k">if</span>  <span class="n">bucket_level</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">10</span>
    <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
  <span class="c1"># 以 100 為大區塊為例子
</span>  <span class="c1"># buckets可能長 [[3,0,9,1,9],[10,12,11,19]....]
</span>  <span class="c1"># 以 100 為小區塊為例子
</span>  <span class="c1"># buckets可能長 [[0],[1],[ ],[3],....[9, 9, 9]]
</span>
  <span class="n">arr</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
  <span class="c1"># 清空目前參考陣列的數值
</span>  <span class="c1"># 因為等等arr會加入排序好的
</span>  <span class="c1"># buckets 有儲存未排序的
</span>
  <span class="k">for</span> <span class="n">bucket</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
      <span class="nf">bucket_sort</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">bucket_level</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">arr</span> <span class="o">+=</span> <span class="n">bucket</span>

<span class="c1"># is_sub_bucket:bool -&gt; bucket_level:int
</span><span class="k">def</span> <span class="nf">is_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">bucket_level</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
  <span class="k">if</span> <span class="n">bucket_level</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="c1">#第三層就返回
</span>    <span class="k">return</span> <span class="bp">True</span>

  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
        <span class="k">return</span> <span class="bp">False</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>36</wp:post_id>
      <wp:post_date>2023-07-02 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-07-02 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>排序演算法</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>正規化檢查重複出現的單詞</title>
      <link>http://example.com/正規化檢查重複出現的單詞/</link>
      <pubDate>Sun, 09 Jul 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="C# 王者歸來 開發範例">
        <![CDATA[C# 王者歸來 開發範例]]>
      </category>
      <guid isPermaLink="false">
jekyll-36-正規化檢查重複出現的單詞      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="正規化檢查重複出現的單詞">正規化檢查重複出現的單詞</h1>

<h2 id="使用情境">使用情境</h2>
<p>檢查 fish dog dog cat cat food  <br />
檢查出 dog dog, cat cat 兩組</p>

<h2 id="關鍵技術">關鍵技術</h2>

<table>
  <thead>
    <tr>
      <th>正規</th>
      <th>描述</th>
      <th>範例</th>
      <th>匹配</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\b</td>
      <td>匹配一個單詞邊界，也就是指單詞和空格間的位置</td>
      <td>er\b</td>
      <td>匹配”never”中的”er”，但不能匹配”verb”中的”er”</td>
    </tr>
    <tr>
      <td>\w</td>
      <td>與任何單詞字符匹配</td>
      <td>\w</td>
      <td>“Room#1” 中的 “R”、 “o”、 “m” 和 “1”</td>
    </tr>
    <tr>
      <td>(?&lt; name &gt;subexpression)</td>
      <td>將匹配的子表達式捕獲到一個命名組中</td>
      <td>(?&lt; double&gt;\w)\k&lt; double&gt;</td>
      <td>“hello” 中的 “ll”</td>
    </tr>
    <tr>
      <td>\k&lt; name &gt;</td>
      <td>命名反向引用。匹配命名表達式的值</td>
      <td>(?&lt; char&gt;\w+)\k&lt; char&gt;</td>
      <td>“banana” 中的 “anan”</td>
    </tr>
    <tr>
      <td>\s</td>
      <td>與任何空白字符匹配</td>
      <td>\w\s</td>
      <td>“ABC1 D C” 中的 “D “</td>
    </tr>
  </tbody>
</table>

<p>System.Text.RegularExpressions.MatchCollection  <br />
成功比對的集合</p>

<p>System.Text.RegularExpressions.Match  <br />
比對集合的單一類別</p>

<h2 id="code">code</h2>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="n">textBox1</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
<span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">RegularExpressions</span><span class="p">.</span><span class="n">MatchCollection</span> <span class="n">matchs</span> <span class="p">=</span>
  <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">RegularExpressions</span><span class="p">.</span><span class="n">Regex</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">@"\b(?&lt;word&gt;\w+)\s+(\k&lt;word&gt;)\b"</span><span class="p">,</span>
  <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">RegularExpressions</span><span class="p">.</span><span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span> <span class="p">|</span> 
  <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">RegularExpressions</span><span class="p">.</span><span class="n">RegexOptions</span><span class="p">.</span><span class="n">IgnoreCase</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">RegularExpressions</span><span class="p">.</span><span class="n">Match</span> <span class="n">item</span> <span class="k">in</span> <span class="n">matchs</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">word</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="s">"word"</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="額外資訊">額外資訊</h3>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.regularexpressions.regexoptions?view=net-7.0">RegexOptions枚舉</a>  <br />
<a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.text.regularexpressions.matchcollection?view=net-7.0">MatchCollection 類別</a>  <br />
<a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.text.regularexpressions.match?view=net-7.0">Match 類別</a></p>
]]>
      </content:encoded>
      <wp:post_id>37</wp:post_id>
      <wp:post_date>2023-07-09 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-07-09 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>正規化檢查重複出現的單詞</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>單例模式</title>
      <link>http://example.com/單例模式/</link>
      <pubDate>Mon, 10 Jul 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計模式">
        <![CDATA[設計模式]]>
      </category>
      <guid isPermaLink="false">
jekyll-37-單例模式      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="單例模式">單例模式</h1>

<p>當你需樣以下幾個功能</p>

<ol>
  <li>log紀錄</li>
  <li>驅動程式</li>
  <li>計分板</li>
  <li>物件池</li>
  <li>執行續池</li>
  <li>提示視窗</li>
</ol>

<p>這幾個只需要一個物件就可以處理的時候  <br />
不小心產生了兩個，不只會導致非預想的結果  <br />
還會有多餘的資源浪費</p>

<h2 id="全域變數-vs-單例模式">全域變數 VS 單例模式</h2>

<p>你可以在程式定義一些全域變數    <br />
可以做到與單例模式一樣的效果</p>

<p>但有一些差別</p>

<ol>
  <li>控制物件的初始化時間，例如當你用不到這物件時，單例模式可以節省下記憶體</li>
  <li>全域變數會因為執行順序影響到初始化</li>
</ol>

<h2 id="單例模式的範例">單例模式的範例</h2>

<ol>
  <li>建構式是私有的</li>
  <li>提供一個全域接觸點</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span><span class="o">{</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nc">Instance</span><span class="o">;</span>

  <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
    <span class="k">if</span><span class="o">(</span><span class="nc">Instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
      <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>

    <span class="k">return</span> <span class="nc">Instance</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="單例模式vs多執行序">單例模式VS多執行序</h2>

<p>單例模式在多執序下</p>

<p>可能會造成非預期的執行順序</p>

<table>
  <thead>
    <tr>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>thread1</td>
      <td>1</td>
      <td>-</td>
      <td>2</td>
      <td>-</td>
      <td>4</td>
      <td>5</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td>thread2</td>
      <td>-</td>
      <td>1</td>
      <td>-</td>
      <td>2</td>
      <td>-</td>
      <td>-</td>
      <td>4</td>
      <td>5</td>
    </tr>
  </tbody>
</table>

<p>本來預想是只能初始化一個實例，但如果初始化兩次  <br />
就會造成許多意外錯誤</p>

<h2 id="優化執行序的問題">優化執行序的問題</h2>

<h3 id="1lazy與eager-建立方式">1.lazy與eager 建立方式</h3>

<p>lazy是當應用程式有需求時，才會去建立物件</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
  <span class="k">if</span><span class="o">(</span><span class="nc">Instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
    <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>

  <span class="k">return</span> <span class="nc">Instance</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>eager是直接在應用程式上面，實例化單例模式  <br />
當你的運行成本還在可控範圍內可以使用</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="2使用同步">2.使用同步</h3>
<p>可以使多個執行序比需等待這個區塊的程式碼  <br />
不過前提是這個區塊的效能就會低下，每個執行序必須等待上一個執行完</p>

<p>C#範例:  <br />
使用lock，一次只有一個線程可以進入此區塊</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">object</span> <span class="n">padlock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
<span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span>
<span class="p">{</span>
  <span class="k">get</span>
  <span class="p">{</span>
    <span class="k">lock</span> <span class="p">(</span><span class="n">padlock</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>java範例:  <br />
加入synchronized關鍵字</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
  <span class="k">if</span><span class="o">(</span><span class="nc">Instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
    <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>

  <span class="k">return</span> <span class="nc">Instance</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="3雙重檢查鎖">3.雙重檢查鎖</h3>
<p>使用雙重檢查鎖，可以在第一次還未初始化時才同步  <br />
因此可以增加執行效率</p>

<p>C#範例:  <br />
在第一層判斷實例化的地方加入lock  <br />
如此可以在第一次還未初始化時才同步</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">object</span> <span class="n">padlock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
<span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span>
<span class="p">{</span>
  <span class="k">get</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">lock</span> <span class="p">(</span><span class="n">padlock</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>java範例:  <br />
加入volatile關鍵字，可以對使用此關鍵字的變數使用synchronized</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
  <span class="k">if</span><span class="o">(</span><span class="nc">Instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
       <span class="k">if</span><span class="o">(</span><span class="nc">Instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
          <span class="nc">Instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="o">}</span>
    
  <span class="o">}</span>
  <span class="k">return</span> <span class="nc">Instance</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>參考資料:  <br />
<a href="https://zhuanlan.zhihu.com/p/346508956">C# 單例模式</a></p>

]]>
      </content:encoded>
      <wp:post_id>38</wp:post_id>
      <wp:post_date>2023-07-10 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-07-10 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>單例模式</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>裝飾器模式</title>
      <link>http://example.com/裝飾器模式/</link>
      <pubDate>Tue, 11 Jul 2023 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="設計模式">
        <![CDATA[設計模式]]>
      </category>
      <guid isPermaLink="false">
jekyll-38-裝飾器模式      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<h1 id="裝飾器模式">裝飾器模式</h1>

<p>雙11大拍賣  <br />
電腦顯示卡需要特價促銷</p>

<p>如果使用繼承來設計類別</p>
<h2 id="繼承">繼承</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Goods</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">descript</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">cost</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rtx3060</span> <span class="kd">extends</span> <span class="nc">Goods</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">9500</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Rtx4060</span> <span class="kd">extends</span> <span class="nc">Goods</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">10500</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rtx3060_11_off</span> <span class="kd">extends</span> <span class="nc">Rtx3060</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">cost</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.85</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>考慮到有很多商品加上有各種的促銷，會有非常多的類別需要維護</p>

<h2 id="修改基礎類別做調整">修改基礎類別做調整</h2>
<p>使用基礎類別來控制各種計算流程，配合繼承使子類別做出額外的計算與紀錄</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Goods</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">descript</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="kt">int</span> <span class="n">i_cost</span><span class="o">;</span>
    <span class="kd">public</span>  <span class="kt">double</span> <span class="nf">cost</span><span class="o">(){</span>
        <span class="kt">double</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">b11_off</span><span class="o">){</span>
            <span class="n">base</span> <span class="o">*=</span> <span class="mf">0.88</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">b3c_off</span><span class="o">){</span>
            <span class="n">base</span> <span class="o">*=</span> <span class="mf">0.95</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">base</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="n">b11_off</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="n">b3c_off</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">Is11_off</span><span class="o">(){</span> <span class="k">return</span> <span class="n">b11_off</span><span class="o">;}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set_11_off</span><span class="o">(){};</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rtx3060</span> <span class="kd">extends</span> <span class="nc">Goods</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Rtx3060</span><span class="o">(){</span>
        <span class="n">b11_off</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">cost</span><span class="o">()</span> <span class="o">*</span> <span class="mi">9500</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>
<p>這樣可以正確計算，也可以減少類別數量</p>

<p>不過有幾個缺點</p>
<ol>
  <li>折扣改變必須修改程式</li>
  <li>有新的促銷活動也必須加入新的折扣</li>
  <li>賣化妝品的時候，化妝品並不需要3c折扣的方法</li>
</ol>

<h4 id="延伸解釋3的問題">延伸解釋3的問題</h4>
<p>使用繼承可以重複使用程式碼，重複利用的同時  <br />
也必須為每個繼承基礎類別的程式維護  <br />
全部的子類別不一定需要基礎類別的所有行為</p>

<h2 id="使用裝飾器模式">使用裝飾器模式</h2>

<ol>
  <li>一個商品RTX4060</li>
  <li>雙11拍賣包裝RTX4060</li>
  <li>3C拍賣包裝雙11</li>
</ol>

<p>透過一層包裝一層，可以達到動態執行  <br />
呼叫的順序為 3-&gt;2-&gt;1</p>

<p>分為兩個種類</p>
<ol>
  <li>裝飾器類別</li>
  <li>被裝飾類別</li>
</ol>

<ul>
  <li>裝飾器與被裝飾類別的基礎型別都是一樣的</li>
  <li>可以使用一個以上的裝飾器來裝飾</li>
  <li>裝飾器可以幫被被裝飾類別加入自己的行為</li>
</ul>

<h2 id="裝飾器的類別圖">裝飾器的類別圖</h2>

<p>定義；可以動態幫物件附加行為</p>

<p><img src="https://images2.imgbox.com/bb/e7/Cz8Y0Lk7_o.jpg?download=true" alt="裝飾者類別圖" /></p>

<p>裝飾器繼承Component不是為了取得基礎類別的行為  <br />
是為了取得與基礎類別一樣的型態</p>

<p>然後就可以不用透過繼承獲得行為  <br />
透過一樣的型態的組件互相組合  <br />
能獲得不同於繼承的高度彈性(執行時可以改變)</p>

<h2 id="程式碼範例">程式碼範例</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">GoodsComponent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Rtx3060</span> <span class="kd">extends</span> <span class="nc">GoodsComponent</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">9500</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">GoodsDecorator</span> <span class="kd">extends</span> <span class="nc">GoodsComponent</span><span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">GoodsComponent</span> <span class="n">goods</span><span class="o">;</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">C11_off</span> <span class="kd">extends</span> <span class="nc">GoodsDecorator</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">C11_off</span><span class="o">(</span><span class="nc">GoodsComponent</span> <span class="n">goods</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">goods</span> <span class="o">=</span> <span class="n">goods</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">goods</span><span class="o">.</span><span class="na">cost</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.95</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">C3c_off</span> <span class="kd">extends</span> <span class="nc">GoodsDecorator</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">C3c_off</span><span class="o">(</span><span class="nc">GoodsComponent</span> <span class="n">goods</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">goods</span> <span class="o">=</span> <span class="n">goods</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">goods</span><span class="o">.</span><span class="na">cost</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.88</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>使用方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GoodsComponent</span> <span class="n">rtx3060</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rtx3060</span><span class="o">();</span>
<span class="n">rtx3060</span> <span class="o">=</span> <span class="k">new</span> <span class="n">C11_off</span><span class="o">(</span><span class="n">rtx3060</span><span class="o">);</span>
<span class="n">rtx3060</span> <span class="o">=</span> <span class="k">new</span> <span class="n">C3c_off</span><span class="o">(</span><span class="n">rtx3060</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rtx3060</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
</code></pre></div></div>

]]>
      </content:encoded>
      <wp:post_id>39</wp:post_id>
      <wp:post_date>2023-07-11 16:00:00</wp:post_date>
      <wp:post_date_gmt>2023-07-11 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>裝飾器模式</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>appium 爬蟲 permission denial</title>
      <link>http://example.com/appium 爬蟲 permission denial/</link>
      <pubDate>Thu, 06 Feb 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="spider">
        <![CDATA[spider]]>
      </category>
      <guid isPermaLink="false">
jekyll-39-appium 爬蟲 permission denial      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>當你使用</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell dumpsys window | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'mCurrentFocus|mFocusedApp'</span>
</code></pre></div></div>
<p>取得MainActivity,並放到capabilities<br />
啟動失敗被告知權限不足時</p>

<p>因中途的CurrentFocus已發生改變，抓取到錯誤的數值</p>

<p>輸入</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb logcat <span class="nt">-s</span> actionmanager
</code></pre></div></div>
<p>再次開啟APP 這次就能抓取正確的activity</p>

]]>
      </content:encoded>
      <wp:post_id>40</wp:post_id>
      <wp:post_date>2025-02-06 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-02-06 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>appium 爬蟲 permission denial</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>React開發之Docker build-time 和 run-time 的環境變數差異</title>
      <link>http://example.com/React開發之Docker build-time 和 run-time 的環境變數差異/</link>
      <pubDate>Mon, 24 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="react">
        <![CDATA[react]]>
      </category>
      <guid isPermaLink="false">
jekyll-40-React開發之Docker build-time 和 run-time 的環境變數差異      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>你<strong>可以在啟動容器時再指定 <code>REACT_APP_ENV</code></strong>，但它<strong>只對「執行階段」的應用有效</strong>。</p>

<p>但因為 React 是 <strong>在建置（build）時就把環境變數寫死到靜態檔案裡</strong>的，你如果要讓 <code>REACT_APP_ENV</code> 真正影響 React 的行為，那<strong>只能在 <code>npm run build</code> 時給定</strong>這個變數。</p>

<hr />

<h3 id="-更具體地說">🧠 更具體地說：</h3>

<h4 id="react-的特性">React 的特性：</h4>

<p>React（使用 CRA 建立的）應用程式是前端靜態網站，它在 <code>npm run build</code> 時就已經把環境變數「寫死」進 <code>.js</code> 檔案裡了</p>

<h3 id="-所以要根據情境選擇">💡 所以要根據情境選擇：</h3>

<table>
  <thead>
    <tr>
      <th>目標</th>
      <th>是否可用 run-time 指定環境變數？</th>
      <th>說明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>React App 不同環境行為（如 API base URL）</td>
      <td>❌ 否</td>
      <td>必須在 build 時指定 <code>REACT_APP_ENV</code></td>
    </tr>
    <tr>
      <td>Nginx 或後端應用的行為</td>
      <td>✅ 可</td>
      <td>可在 <code>docker run -e</code> 指定環境變數</td>
    </tr>
  </tbody>
</table>

<p>react dockerfile</p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ARG</span><span class="s"> REACT_APP_ENV=K8S</span>

<span class="k">ENV</span><span class="s"> REACT_APP_ENV=$REACT_APP_ENV</span>
<span class="c"># 執行 React 應用建置</span>

<span class="k">RUN </span>npm run build
</code></pre></div></div>
<p>react  <br />
config.js  <br />
config.value.js</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">_configValueSwitch</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config.value</span><span class="dl">'</span><span class="p">;</span>

  

<span class="kd">let</span> <span class="nx">NOW_ENV</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">LOCAL</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REACT_APP_ENV</span><span class="p">);</span>

<span class="k">if </span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REACT_APP_ENV</span><span class="p">)</span> <span class="p">{</span>

<span class="c1">// Dockerfile build 的時候替換環境</span>

<span class="nx">NOW_ENV</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REACT_APP_ENV</span><span class="p">;</span>

<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="p">{</span>

<span class="na">SERVER_POINT</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SERVER_POINT</span><span class="dl">'</span><span class="p">,</span>

<span class="na">API_BASE_PORT</span><span class="p">:</span> <span class="dl">'</span><span class="s1">API_BASE_PORT</span><span class="dl">'</span>

<span class="p">};</span>

<span class="kd">const</span> <span class="nx">_valueSwitch</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="k">return</span> <span class="nf">_configValueSwitch</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">NOW_ENV</span><span class="p">);</span>

<span class="p">};</span>

  

<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">keys</span><span class="p">).</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="nx">config</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_valueSwitch</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>

<span class="p">});</span>

  

<span class="k">export</span> <span class="k">default</span> <span class="nx">config</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">keys</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config</span><span class="dl">'</span><span class="p">;</span>

  

<span class="kd">const</span> <span class="nx">LOCAL</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">LOCAL</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DEV</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">DEV</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">STAGE</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">STAGE</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PROD</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">PROD</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DOCKER</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">DOCKER</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">K8S</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">K8S</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">IP</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">127.0.0.1</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// IP = '192.168.1.101'; // peja</span>

  

<span class="k">export</span> <span class="kd">const</span> <span class="nx">configValue</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_target</span><span class="p">,</span> <span class="nx">_env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

<span class="kd">let</span> <span class="nx">result</span><span class="p">;</span>

<span class="k">switch </span><span class="p">(</span><span class="nx">_target</span><span class="p">)</span> <span class="p">{</span>

<span class="k">case</span> <span class="nx">keys</span><span class="p">.</span><span class="na">SERVER_POINT</span><span class="p">:</span>

<span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">LOCAL</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`ws://</span><span class="p">${</span><span class="nx">IP</span><span class="p">}</span><span class="s2">:8080/`</span><span class="p">;</span>

<span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">DEV</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`wss://sample.com/`</span><span class="p">;</span>

<span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">STAGE</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`wss://sample/`</span><span class="p">;</span>

<span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">PROD</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`wss://sample/`</span><span class="p">;</span>

<span class="k">break</span><span class="p">;</span>

<span class="k">case</span> <span class="nx">keys</span><span class="p">.</span><span class="na">API_BASE_PORT</span><span class="p">:</span>

<span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">LOCAL</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`8080`</span><span class="p">;</span>

<span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">DOCKER</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`8081`</span><span class="p">;</span>

<span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">_env</span> <span class="o">===</span> <span class="nx">K8S</span><span class="p">)</span> <span class="nx">result</span> <span class="o">=</span> <span class="s2">`30001`</span><span class="p">;</span>

<span class="nl">default</span><span class="p">:</span>

<span class="k">break</span><span class="p">;</span>

<span class="p">}</span>

<span class="k">return</span> <span class="nx">result</span><span class="p">;</span>

<span class="p">};</span>

  

<span class="k">export</span> <span class="k">default</span> <span class="nx">configValue</span><span class="p">;</span>
</code></pre></div></div>

<p>應用的場景</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//在頂部import</span>
 <span class="c1">// 路徑依實際專案結構調整</span>
<span class="k">import</span> <span class="nx">config</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../config/config</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">//如下</span>
<span class="k">new</span> <span class="nc">SockJS</span><span class="p">(</span>

<span class="s2">`http://localhost:</span><span class="p">${</span><span class="nx">getConfig</span><span class="p">.</span><span class="nx">API_BASE_PORT</span><span class="p">}</span><span class="s2">/stomp?userId=</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span>

<span class="p">),</span>
</code></pre></div></div>

<p>這樣就可以同時使用開發環境與其他環境有不同的  <br />
port  <br />
ip  <br />
原始碼<br />
<a href="https://github.com/lipeijia/chat-room">source code</a></p>
]]>
      </content:encoded>
      <wp:post_id>41</wp:post_id>
      <wp:post_date>2025-03-24 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-24 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>React開發之Docker build-time 和 run-time 的環境變數差異</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>containerd 只要有nvidia-container-runtime就能執行 GPU 容器?</title>
      <link>http://example.com/containerd 只要有nvidia-container-runtime就能執行 GPU 容器?/</link>
      <pubDate>Mon, 24 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="containerd">
        <![CDATA[containerd]]>
      </category>
      <guid isPermaLink="false">
jekyll-41-containerd 只要有nvidia-container-runtime就能執行 GPU 容器?      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>當ctr 要執行 gpu 驗證時的注意事項</p>

<p>這是一個非常關鍵的問題，簡單來說：</p>

<pre><code class="language-text">❌ 不完全是。只有安裝 nvidia-container-runtime 還不夠，還需要正確整合到 containerd 的設定中，才能讓 containerd 實際「使用」這個 runtime 來執行 GPU 容器。
</code></pre>

<h2 id="-必要條件以-containerd-為例">✅ 必要條件（以 containerd 為例）：</h2>

<table>
  <thead>
    <tr>
      <th>條件</th>
      <th>是否必需</th>
      <th>說明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>✅安裝 <code>nvidia-container-runtime</code></td>
      <td>是</td>
      <td>提供能夠在容器內掛載 GPU 驅動與設備的功能</td>
    </tr>
    <tr>
      <td>✅ 安裝 <code>nvidia-container-toolkit</code></td>
      <td>是</td>
      <td>負責產生與 runtime 整合所需的設定檔，例如 runtime hook</td>
    </tr>
    <tr>
      <td>✅ <code>containerd</code> 設定啟用 <code>nvidia</code> runtime handler</td>
      <td>是</td>
      <td>編輯 <code>/etc/containerd/config.toml</code>，註冊名為 <code>nvidia</code> 的 handler</td>
    </tr>
    <tr>
      <td>✅ containerd 重啟</td>
      <td>是</td>
      <td>設定變更後必須重新啟動才能生效</td>
    </tr>
    <tr>
      <td>✅ 正確使用 <code>--gpus</code> 或 <code>runtimeClassName</code> 呼叫 nvidia runtime</td>
      <td>是</td>
      <td>否則 containerd 預設還是用 runc，無法掛載 GPU</td>
    </tr>
  </tbody>
</table>

<p>🧪 例子：正確執行 GPU 容器（使用 containerd）  <br />
以我的fedora 41 來說已經預設有 containerd  <br />
記得docker.io/nvidia/cuda:12.3.0-baseu必須先pull</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ctr run <span class="nt">--rm</span> <span class="nt">--gpus</span> 0 docker.io/nvidia/cuda:12.3.0-base nvc nvidia-smi
</code></pre></div></div>

<p>如果你只裝了 nvidia-container-runtime，但：</p>

<pre><code>沒安裝 toolkit

沒設定 config.toml  

沒重啟 containerd 
</code></pre>

<p>這條指令就會失敗，出現錯誤如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>OCI runtime create failed: ... unknown runtime
</code></pre></div></div>

<p>📦 安裝與設定範例（Fedora）</p>
<h4 id="1-安裝">1. 安裝：</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install</span> <span class="nt">-y</span> nvidia-container-toolkit
</code></pre></div></div>

<p>這同時會安裝 nvidia-container-runtime。</p>
<h4 id="2-產生-containerd-設定自動加到-configtoml">2. 產生 containerd 設定（自動加到 config.toml）：</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nvidia-ctk runtime configure <span class="nt">--runtime</span><span class="o">=</span>containerd
</code></pre></div></div>

<p>這是 NVIDIA 提供的官方工具，用來安全地加設定。</p>

<p>重啟 containerd 生效</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart containerd
</code></pre></div></div>
<p>✅ 總結：你需要這三樣缺一不可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvidia-container-runtime

nvidia-container-toolkit

containerd.config.toml <span class="c">#註冊 nvidia handler 並重啟</span>

</code></pre></div></div>

<p>只有裝 runtime，但不整合，不會自動生效。</p>
]]>
      </content:encoded>
      <wp:post_id>42</wp:post_id>
      <wp:post_date>2025-03-24 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-24 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>containerd 只要有nvidia-container-runtime就能執行 GPU 容器?</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>gpu pod 持續Pending, 無法至running</title>
      <link>http://example.com/gpu pod 持續Pending, 無法至runninggpu pod 持續Pending, 無法至running/</link>
      <pubDate>Tue, 25 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="k8s">
        <![CDATA[k8s]]>
      </category>
      <guid isPermaLink="false">
jekyll-42-gpu pod 持續Pending, 無法至runninggpu pod 持續Pending, 無法至running      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>當看到 Pod 卡在 Pending，其實是 排程器（Scheduler）發現沒有可用 GPU，所以無法排到任何 Node 上。根本原因還是：</p>

<p>我碰到的例子是缺少libnvidia-ml.so.1</p>

<pre><code>NVIDIA Device Plugin DaemonSet 在它自己的容器內找不到 libnvidia-ml.so.1，因此沒註冊 GPU。
</code></pre>

<p>從日誌可見：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>could not load NVML library: libnvidia-ml.so.1: cannot open shared object file
...
No devices found. Waiting indefinitely.
</code></pre></div></div>

<blockquote>
  <p>只要 device plugin 「<strong>找不到 GPU</strong>」→ K8S 就不會有 nvidia.com/gpu 資源 → 要求  GPU 的 Pod 一律 Pending。<br />
為什麼 Device Plugin Pod 找不到 libnvidia-ml.so.1？</p>
</blockquote>

<blockquote>
  <p>因為它 沒有用到 <strong>nvidia runtime</strong>，導致 GPU 驅動檔案沒有自動掛進去容器。<br />
若執行 ctr run –rm –gpus 0 … 之所以可以執行成功，是因為直接呼叫 containerd（或是 nvidia-container-runtime）跑容器</p>
</blockquote>

<blockquote>
  <p>但是 device plugin 本身 是一個 DaemonSet，Kubernetes 排它時，預設只會用 runc。如果 device plugin 沒跑在 nvidia runtime 上，就不會看到 GPU 驅動庫。</p>
</blockquote>

<h1 id="nvidia-device-plugin的介紹">Nvidia device plugin的介紹</h1>
<hr />

<h3 id="1-device-plugin-只是一個-daemonset">1. Device Plugin 只是一個 DaemonSet</h3>

<pre><code>它的目的是掃描主機上的 GPU，並告訴 Kubernetes：「我這台機器有 GPU，可以用！」

它不會自己執行需要 GPU 的程式，也不需要自己掛上 GPU device。
</code></pre>

<h3 id="2-它使用-hostpath-掛載-devnvidia-與驅動資料夾">2. 它使用 hostPath 掛載 /dev/nvidia* 與驅動資料夾</h3>

<pre><code>DaemonSet 通常會這樣寫： ```yaml  volumeMounts:
- name: dev
  mountPath: /dev
volumes:
- name: dev
  hostPath:
    path: /dev ```
</code></pre>

<h3 id="解法-1讓-device-plugin-daemonset-使用-runtimeclassname-nvidia">解法 1：讓 Device Plugin DaemonSet 使用 runtimeClassName: nvidia</h3>

<p>你可以直接 Patch 官方的 Device Plugin DaemonSet，讓它的容器 改用 nvidia runtime。<br />
預設官方的 YAML 沒有指定 runtimeClass，於是它用預設 runc，就讀不到 libnvidia-ml.so.1。</p>
<ol>
  <li>先套用原檔
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.14.1/nvidia-device-plugin.yml
</code></pre></div>    </div>
  </li>
  <li>Patch DaemonSet</li>
</ol>

<p>把下面內容存成 patch-ds.yaml：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spec</span><span class="pi">:</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">runtimeClassName</span><span class="pi">:</span> <span class="s">nvidia</span>
</code></pre></div></div>

<p>然後執行：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nt">-n</span> kube-system patch daemonset nvidia-device-plugin-daemonset 
  <span class="nt">--patch</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat </span>patch-ds.yaml<span class="si">)</span><span class="s2">"</span>

</code></pre></div></div>

<p>Patch 後再看一下 DaemonSet YAML，你會看到多了 runtimeClassName: nvidia：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nt">-n</span> kube-system get daemonset nvidia-device-plugin-daemonset <span class="nt">-o</span> yaml

</code></pre></div></div>

<p>這樣，Device Plugin 的容器就會以 nvidia runtime 執行，能掛載到 libnvidia-ml.so.1。</p>
<h3 id="解法-2將-nvidia-設為容器預設-runtime">解法 2：將 nvidia 設為「容器預設 runtime」</h3>

<p>如果你不想改 DaemonSet 的 runtimeClassName，也可以讓整個 containerd 預設就跑 nvidia runtime。<br />
但這通常 <strong>不建議</strong>，因為這樣所有 Pod 都會帶 GPU runtime 啟動（不一定合適，也可能有額外開銷）。</p>

<p>做法是把 /etc/containerd/config.toml：</p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[plugins."io.containerd.grpc.v1.cri"]</span>
  <span class="py">default_runtime_name</span> <span class="p">=</span> <span class="s">"runc"</span>
  <span class="err">...</span>
</code></pre></div></div>

<p>改為</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[plugins."io.containerd.grpc.v1.cri"]</span>
  <span class="py">default_runtime_name</span> <span class="p">=</span> <span class="s">"nvidia"</span>
  <span class="err">...</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#然後 </span>
<span class="nb">sudo </span>systemctl restart containerd
</code></pre></div></div>

<p>不過這樣做完之後，所有 Pod 預設都會用 nvidia runtime。除非你整台機器都只跑 GPU workload，否則比較少人這樣做。<br />
驗證：Device Plugin 會開始註冊 GPU</p>

<p>不管你用哪個解法，只要讓 Device Plugin 以 nvidia runtime 來跑，就會看到它 log 裡改為：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IXXXX main.go:XXX] Starting to serve on /var/lib/kubelet/device-plugins/nvidia.sock
IXXXX main.go:XXX] Registered GPU device ...
</code></pre></div></div>

<p>然後：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.items[0].status.allocatable.nvidia\.com/gpu}'</span>
<span class="c"># → 1  # 代表有偵測到gpu</span>
</code></pre></div></div>

<p>最後你的 gpu-debug Pod或 gpu-test Pod就能正常排程執行，而不再卡在 Pending。<br />
總結</p>

<pre><code>問題根源：Device Plugin DaemonSet 預設跑在 runc → 容器內沒看到 GPU 驅動 → 不註冊 nvidia.com/gpu

解法：

    (建議) DaemonSet patch：加 runtimeClassName: nvidia

    (可選) 整台預設 runtime 改成 nvidia（風險較高）

成功驗證：Pod 不再 Pending，kubectl get node 顯示有 GPU 資源
</code></pre>
]]>
      </content:encoded>
      <wp:post_id>43</wp:post_id>
      <wp:post_date>2025-03-25 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-25 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>gpu pod 持續Pending, 無法至runninggpu pod 持續Pending, 無法至running</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>multiprocessing vs pytorch</title>
      <link>http://example.com/multiprocessing vs pytorch/</link>
      <pubDate>Tue, 25 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="pytorch">
        <![CDATA[pytorch]]>
      </category>
      <guid isPermaLink="false">
jekyll-43-multiprocessing vs pytorch      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>在 PyTorch 中進行模型訓練或推論時，<strong>GPU 使用率已經很高，甚至 CPU 也偏高</strong>，這是因為 <strong>PyTorch 背後已經內建了高度優化的並行處理機制</strong>，包括：</p>

<ul>
  <li>
    <p><strong>GPU 計算：使用 CUDA 進行矩陣運算（TensorCore、cuDNN、cuBLAS 等）</strong></p>
  </li>
  <li>
    <p><strong>CPU 資源：用於資料加載、前後處理、梯度運算等</strong></p>
  </li>
  <li>
    <p><strong>資料加載（DataLoader）：可內建使用多進程 <code>multiprocessing</code> 加速 I/O</strong></p>
  </li>
</ul>

<h2 id="-pytorch-本身是否需要手動使用-multiprocessing">✅ PyTorch 本身是否需要手動使用 <code>multiprocessing</code>？</h2>

<p>在大多數情況下，<strong>不需要自己寫 <code>multiprocessing.Process()</code> 來跑 PyTorch</strong>，因為：</p>

<ul>
  <li>
    <p>PyTorch 本身的資料加載、模型訓練就已經支援並行</p>
  </li>
  <li>
    <p>使用 <code>torch.utils.data.DataLoader</code> 時，可以直接透過 <code>num_workers</code> 來自動開多個子進程進行資料加載</p>
  </li>
  <li>
    <h2 id="多-gpu-訓練時推薦使用內建的分散式訓練-api如-torchnndataparallel-或-torchdistributed">多 GPU 訓練時，推薦使用內建的分散式訓練 API，如 <code>torch.nn.DataParallel</code> 或 <code>torch.distributed</code></h2>
  </li>
</ul>

<blockquote>
  <h4 id="num_workers--0-時背景自動啟動multiprocessing">num_workers &gt; 0 時，背景自動啟動multiprocessing</h4>
</blockquote>

<h2 id="使用-pytorch-搭配-multiprocessing-時的注意事項">使用 PyTorch 搭配 <code>multiprocessing</code> 時的注意事項</h2>

<table>
  <thead>
    <tr>
      <th>問題</th>
      <th>建議</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CUDA 初始化會在 fork 後失敗</td>
      <td>避免在 <code>multiprocessing</code> 中 fork 後才使用 CUDA</td>
    </tr>
    <tr>
      <td>多 GPU 模型訓練</td>
      <td>建議使用 <code>torch.distributed</code> 而非手動 <code>multiprocessing</code></td>
    </tr>
    <tr>
      <td>CUDA Tensor 在多進程中傳遞</td>
      <td><strong>不要在進程間傳遞 CUDA Tensor</strong>，容易出錯，請在每個進程內獨立建立 GPU 張量</td>
    </tr>
    <tr>
      <td>多進程資料加載死鎖</td>
      <td>確保程式在 <code>__main__</code> 下執行，且 <code>DataLoader</code> 的 <code>num_workers</code> 不要設過高</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="-結論與建議">✅ 結論與建議</h2>

<table>
  <thead>
    <tr>
      <th>需求</th>
      <th>建議</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>單 GPU 訓練 / 推論</strong>，想提升效能</td>
      <td>✅ 使用 <code>DataLoader(num_workers &gt; 0)</code></td>
    </tr>
    <tr>
      <td><strong>多 GPU 並行任務（非同步訓練）</strong></td>
      <td>✅ 自行用 <code>multiprocessing.Process</code> 分別跑</td>
    </tr>
    <tr>
      <td><strong>多 GPU 訓練同一模型</strong></td>
      <td>✅ 使用 <code>torch.nn.DataParallel</code> 或 <code>torch.distributed.launch</code></td>
    </tr>
    <tr>
      <td><strong>CPU 利用率過高</strong></td>
      <td>✅ 檢查 <code>num_workers</code>、<code>pin_memory</code> 設定，或考慮資料前處理是否過重</td>
    </tr>
    <tr>
      <td><strong>GPU 使用率已滿但速度仍慢</strong></td>
      <td>✅ 檢查資料載入瓶頸，可使用預讀（<code>prefetch_factor</code>）或 LMDB 儲存資料</td>
    </tr>
  </tbody>
</table>

<h2 id="額外說明">額外說明</h2>

<h2 id="一cuda-初始化會在-fork-後失敗是什麼意思">一、<strong>「CUDA 初始化會在 fork 後失敗」是什麼意思？</strong></h2>

<h3 id="背景">🔸背景</h3>

<ul>
  <li>
    <p>在 Linux（包含 Fedora）中，<code>multiprocessing</code> 的預設進程啟動方式是 <strong>fork</strong>。</p>
  </li>
  <li>
    <p>「fork」會<strong>複製父進程的記憶體狀態</strong>（連同 CUDA 上的上下文），但 CUDA 並<strong>不支援這種 fork 後的上下文繼承</strong>。</p>
  </li>
</ul>

<h3 id="-結果會怎樣">🧨 結果會怎樣？</h3>

<p>如果你在主進程中初始化了 CUDA（例如呼叫 <code>torch.cuda.is_available()</code>、建立 tensor）然後再用 <code>Process()</code> fork 子進程，<strong>子進程中再使用 CUDA 時可能會報錯</strong>。</p>

<h3 id="-錯誤示範">🚫 錯誤示範：</h3>

<h1 id="主進程先初始化了-cuda">主進程先初始化了 CUDA</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
<span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span>  <span class="c1"># 初始化 CUDA
</span>
<span class="k">def</span> <span class="nf">worker</span><span class="p">():</span>
    <span class="c1"># 在子進程中使用 GPU
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">]).</span><span class="nf">cuda</span><span class="p">()</span>  <span class="c1"># 可能報錯！
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

<span class="err">❗</span><span class="n">常見錯誤</span><span class="err">：</span>

<span class="nb">RuntimeError</span><span class="p">:</span> <span class="n">CUDA</span> <span class="n">error</span><span class="p">:</span> <span class="n">initialization</span> <span class="n">error</span>
</code></pre></div></div>

<p>✅ 正確做法：</p>

<p>👉 避免在 fork 子進程之前初始化 CUDA！</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">():</span>
    <span class="c1"># 在子進程中再初始化 CUDA
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">]).</span><span class="nf">cuda</span><span class="p">()</span>  <span class="c1"># OK！
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="二不要在進程間傳遞-cuda-tensor是什麼意思">二、「不要在進程間傳遞 CUDA Tensor」是什麼意思？</h2>
<p>🔸背景</p>

<pre><code>multiprocessing 的資料交換是透過 序列化（pickle） 傳遞物件。

但 CUDA Tensor 不是普通的記憶體資料，它存在 GPU 的顯存中，Python 的序列化並不能處理它。
</code></pre>

<p>🧨 這樣會報錯或行為不正確：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Queue</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>         <span class="c1"># 嘗試從 queue 中拿 CUDA Tensor
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="nf">cuda</span><span class="p">())</span>     <span class="c1"># 可能錯誤或行為不預期
</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">]).</span><span class="nf">cuda</span><span class="p">()</span>
    <span class="n">q</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>            <span class="c1"># 嘗試傳 CUDA Tensor（不行❌）
</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">q</span><span class="p">,))</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div>

<p>✅ 正確做法：</p>

<p>你可以 只傳 CPU Tensor、numpy、int、float 等普通資料，再讓子進程自己搬上 GPU。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Queue</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">x_cpu</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>            <span class="c1"># 拿到 CPU Tensor
</span>    <span class="n">x_gpu</span> <span class="o">=</span> <span class="n">x_cpu</span><span class="p">.</span><span class="nf">cuda</span><span class="p">()</span>       <span class="c1"># 在子進程自己搬上 GPU
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">x_gpu</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="nc">Queue</span><span class="p">()</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">])</span>    <span class="c1"># CPU Tensor
</span>    <span class="n">q</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="n">p</span> <span class="o">=</span> <span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">q</span><span class="p">,))</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>問題</th>
      <th>錯誤</th>
      <th>解法</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>fork 後 CUDA 初始化失敗</td>
      <td>子進程用到 CUDA 時報錯</td>
      <td>❗不要在主進程用到 CUDA，讓子進程自己初始化</td>
    </tr>
    <tr>
      <td>多進程傳 CUDA Tensor</td>
      <td>可能無法序列化 / 損壞</td>
      <td>✅ 傳 CPU Tensor，子進程自己轉 <code>.cuda()</code></td>
    </tr>
  </tbody>
</table>

<hr />
]]>
      </content:encoded>
      <wp:post_id>44</wp:post_id>
      <wp:post_date>2025-03-25 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-25 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>multiprocessing vs pytorch</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>OCI Image containerd image vs Docker image</title>
      <link>http://example.com/OCI Image containerd image vs Docker image/</link>
      <pubDate>Wed, 26 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="containerd">
        <![CDATA[containerd]]>
      </category>
      <guid isPermaLink="false">
jekyll-44-OCI Image containerd image vs Docker image      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>當 Kubernetes 使用 <code>containerd</code> 來拉取映像時：</p>

<ul>
  <li>
    <p><code>containerd</code> 會把映像儲存在 <strong>自己的存儲庫</strong>（<code>/var/lib/containerd</code>），而非 Docker 的 <code>/var/lib/docker</code>。</p>
  </li>
  <li>
    <p>因此 <code>docker images</code> <strong>無法看到</strong> <code>containerd</code> 的映像，而 <code>containerd</code> 也<strong>無法直接使用 Docker 的映像</strong>。</p>
  </li>
</ul>

<h3 id="如何管理-containerd-的映像"><strong>如何管理 <code>containerd</code> 的映像</strong></h3>

<p>如果你的 Kubernetes 節點是使用 <code>containerd</code>，則應該改用 <code>crictl</code> 或 <code>nerdctl</code> 來管理映像，而不是 <code>docker</code>。</p>

<p>crictl需要安裝，非內建指令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 先去確認官方版本 https://github.com/containerd/nerdctl/releases</span>
<span class="nv">VERSION</span><span class="o">=</span>2.0.4

curl <span class="nt">-LO</span> https://github.com/containerd/nerdctl/releases/download/v<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span>/nerdctl-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span><span class="nt">-linux-amd64</span>.tar.gz

<span class="c">#解壓縮</span>
<span class="nb">sudo tar</span> <span class="nt">-C</span> /usr/local/bin <span class="nt">-xzf</span> nerdctl-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span><span class="nt">-linux-amd64</span>.tar.gz

nerdctl <span class="nt">--version</span>

<span class="c"># 輸出 nerdctl version 2.0.4</span>

</code></pre></div></div>

<p>列出 containerd 中的映像</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crictl images
</code></pre></div></div>

<p>或</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nerdctl images
</code></pre></div></div>

<p>手動拉取映像</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nerdctl pull nginx:latest
</code></pre></div></div>

<p>這與 docker pull nginx:latest 類似，但會拉取映像到 containerd。<br />
手動刪除映像</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crictl rmi nginx:latest
</code></pre></div></div>
<p>或</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nerdctl rmi nginx:latest
</code></pre></div></div>
<p>使用 ctr（不推薦）</p>

<p>ctr 是 containerd 的官方 CLI，但較為底層，一般開發者較少使用：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctr <span class="nt">-n</span> k8s.io images list
</code></pre></div></div>
<h2 id="但crictl-不能-build-image"><strong>但<code>crictl</code> 不能 build image</strong></h2>

<ul>
  <li>
    <p><code>crictl</code> 是設計來跟 Kubernetes 使用的 <strong>CRI (Container Runtime Interface)</strong> API 通訊的工具，重點在於 <strong>管理容器與映像</strong>，而不是建構映像。</p>
  </li>
  <li>
    <p><strong>建構映像（build image）屬於 image builder 的範疇</strong>，而 CRI 是沒有提供 build API 的。</p>
  </li>
  <li>
    <p>所以 <code>crictl</code> 沒有 <code>build</code> 這種指令。</p>
  </li>
</ul>

<h2 id="nerdctl"><a href="https://github.com/containerd/nerdctl"><code>nerdctl</code></a></h2>
<p><code>nerdctl</code>是 <code>containerd</code> 的 CLI，語法幾乎與 <code>docker</code> 相同，適合習慣使用 Docker 的開發者</p>

<h4 id="安裝-nerdctl">安裝 nerdctl</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sSL</span> https://github.com/containerd/nerdctl/releases/latest/download/nerdctl-full-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>.tar.gz | <span class="nb">tar</span> <span class="nt">-xz</span> <span class="nt">-C</span> /usr/local/bin
</code></pre></div></div>
<p>或使用 apt install nerdctl（如果是 Ubuntu/Debian）</p>

<h4 id="使用-nerdctl-建立映像">使用 nerdctl 建立映像</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nerdctl build <span class="nt">-t</span> my-image:latest <span class="nb">.</span>
</code></pre></div></div>
<p>這與 docker build -t my-image:latest . 相同</p>

<h3 id="如何讓-containerd-使用-docker-的映像">如何讓 containerd 使用 Docker 的映像</h3>

<p>如果你有已經在 Docker 裡的映像，但 Kubernetes 是用 containerd，你可以：</p>

<pre><code>把 Docker 映像匯出為 tar 檔 ```bash docker save -o my-image.tar my-image:latest ```
</code></pre>

<p>將映像匯入 containerd</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctr <span class="nt">-n</span> k8s.io images import my-image.tar
</code></pre></div></div>

<p>確認映像已被 containerd 接受</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crictl images
</code></pre></div></div>

<h2 id="總結"><strong>總結</strong></h2>

<p>✅ <strong>Kubernetes 1.20 之後不再需要 Docker，直接使用 <code>containerd</code> 或 <code>CRI-O</code></strong>  <br />
✅ <strong><code>containerd</code> 的映像與 Docker 的映像不共用，它們存儲在不同位置</strong>  <br />
✅ <strong>管理 <code>containerd</code> 映像應該使用 <code>crictl</code> 或 <code>nerdctl</code>，而不是 <code>docker</code></strong>  <br />
✅ <strong>可以用 <code>docker save</code> &amp; <code>ctr images import</code> 把 Docker 映像轉移到 <code>containerd</code></strong></p>

<p>👉 結論是，<strong>當你使用 Kubernetes 時，基本上不需要再使用 Docker 了！</strong> 🚀</p>
]]>
      </content:encoded>
      <wp:post_id>45</wp:post_id>
      <wp:post_date>2025-03-26 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-26 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>OCI Image containerd image vs Docker image</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
    <item>
      <title>vscode and C++ Leetcode專案架構</title>
      <link>http://example.com/vscode and  C++ Leetcode專案架構/</link>
      <pubDate>Sat, 29 Mar 2025 16:00:00 -0000</pubDate>
      <dc:creator>admin</dc:creator>
      <category domain="post_tag" nicename="C++">
        <![CDATA[C++]]>
      </category>
      <guid isPermaLink="false">
jekyll-45-vscode and  C++ Leetcode專案架構      </guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>C++ 的 workflow 要照顧的細節滿多</p>

<p>個人寫Leetcode時 很多檔案需要手動加入不是很方便</p>

<p>找到以下各種方法幫助開發時更加方便與自動化</p>

<h2 id="fedora安裝c">fedora安裝c++</h2>

<ol>
  <li>安裝 GCC C++ 編譯器（g++）</li>
</ol>

<p>開啟終端機，輸入：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install </span>gcc-c++
</code></pre></div></div>

<p>這將會安裝：</p>

<pre><code>g++（GCC C++ 編譯器）

libstdc++（標準 C++ 函式庫）
</code></pre>

<p>確認安裝成功：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ <span class="nt">--version</span>
</code></pre></div></div>
<ol>
  <li>安裝 C++ 開發工具（可選）</li>
</ol>

<p>如果你需要完整的開發環境，包括 make、cmake、gdb（除錯器）等，可以安裝以下套件：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf groupinstall <span class="s2">"Development Tools"</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>cmake gdb
</code></pre></div></div>

<hr />
<h2 id="專案目錄結構">專案目錄結構++</h2>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C_plus</span>
<span class="err">│──</span> <span class="n">problems</span>
<span class="err">│</span>   <span class="err">├──</span> <span class="n">mergeSort</span>
<span class="err">│</span>   <span class="err">│</span>   <span class="err">├──</span> <span class="n">solution</span><span class="p">.</span><span class="n">cpp</span>
<span class="err">│</span>   <span class="err">│</span>   <span class="err">├──</span> <span class="n">solution</span><span class="p">.</span><span class="n">hpp</span>
<span class="err">│</span>   <span class="err">│</span> <span class="err">──</span> <span class="err">──</span> <span class="n">common</span><span class="p">.</span><span class="n">hpp</span><span class="p">(</span><span class="err">共用的</span><span class="n">hpp</span><span class="p">)</span>
<span class="err">│──</span> <span class="p">.</span><span class="n">vscode</span>
<span class="err">│</span>   <span class="err">│──</span> <span class="n">launch</span><span class="p">.</span><span class="n">json</span>
<span class="err">│</span>   <span class="err">│──</span> <span class="n">task</span><span class="p">.</span><span class="n">json</span>
<span class="err">│──</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span>  <span class="p">(</span><span class="err">進入點</span><span class="p">)</span>
<span class="err">│──</span> <span class="n">generate_problems_hpp</span><span class="p">.</span><span class="n">sh</span><span class="p">(</span><span class="err">寫入</span><span class="n">problems</span><span class="p">.</span><span class="n">hpp</span><span class="err">的</span><span class="n">shell</span><span class="p">)</span>
<span class="err">│──</span> <span class="n">Makefile</span>
<span class="err">│──</span> <span class="n">problems</span><span class="p">.</span><span class="n">hpp</span> <span class="p">(</span><span class="err">在</span><span class="n">main</span> <span class="n">include</span><span class="p">)</span>
</code></pre></div></div>

<p>目前的技術總結</p>

<p>1️⃣ Makefile 基礎</p>

<pre><code>使用 Makefile 作為 build system

熟悉了 target, dependency, recipe 的結構

正確管理 .cpp, .o, .d 等中間與最終檔案
</code></pre>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ===== Compiler &amp; Flags =====
</span><span class="nv">CXX</span> <span class="o">=</span> g++
<span class="nv">CXXFLAGS</span> <span class="o">=</span> <span class="nt">-Wall</span> <span class="nt">-Wextra</span> <span class="nt">-O2</span> <span class="nt">-g</span> <span class="nt">-std</span><span class="o">=</span>c++17 <span class="nt">-MMD</span> <span class="nt">-MP</span>

<span class="c"># ===== Auto Generate =====
</span><span class="nv">PROBLEMS_HEADER</span> <span class="o">=</span> problems.hpp
<span class="nv">GEN_SCRIPT</span> <span class="o">=</span> ./generate_problems_hpp.sh

<span class="c"># ===== Source =====
</span><span class="nv">SRC</span> <span class="o">=</span> main.cpp <span class="p">$(</span>wildcard problems/<span class="k">*</span>/solution.cpp<span class="p">)</span>
<span class="nv">OBJ</span> <span class="o">=</span> <span class="p">$(</span>SRC:.cpp<span class="o">=</span>.o<span class="p">)</span>
<span class="nv">DEP</span> <span class="o">=</span> <span class="p">$(</span>OBJ:.o<span class="o">=</span>.d<span class="p">)</span>

<span class="nv">TARGET</span> <span class="o">=</span> main

<span class="c"># ===== Build Rules =====
</span><span class="nl">all</span><span class="o">:</span> <span class="nf">$(PROBLEMS_HEADER) $(TARGET)</span>

<span class="c"># 自動生成 problems.hpp
</span><span class="nl">$(PROBLEMS_HEADER)</span><span class="o">:</span>
	<span class="p">$(</span>GEN_SCRIPT<span class="p">)</span>

<span class="c"># link
</span><span class="nl">$(TARGET)</span><span class="o">:</span> <span class="nf">$(OBJ)</span>
	<span class="p">$(</span>CXX<span class="p">)</span> <span class="p">$(</span>OBJ<span class="p">)</span> <span class="nt">-o</span> <span class="nv">$@</span>

<span class="c"># build object
</span><span class="nl">%.o</span><span class="o">:</span> <span class="nf">%.cpp</span>
	<span class="p">$(</span>CXX<span class="p">)</span> <span class="p">$(</span>CXXFLAGS<span class="p">)</span> <span class="nt">-c</span> <span class="nv">$&lt;</span> <span class="nt">-o</span> <span class="nv">$@</span>

<span class="c"># 自動依賴
</span><span class="k">-include</span><span class="sx"> $(DEP)</span>

<span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="p">$(</span>OBJ<span class="p">)</span> <span class="p">$(</span>DEP<span class="p">)</span> <span class="p">$(</span>TARGET<span class="p">)</span> <span class="p">$(</span>PROBLEMS_HEADER<span class="p">)</span>

<span class="nl">rebuild</span><span class="o">:</span>
	<span class="p">$(</span>MAKE<span class="p">)</span> clean
	<span class="p">$(</span>MAKE<span class="p">)</span> all

</code></pre></div></div>
<p>2️⃣ Wildcard + Pattern Matching</p>
<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SRC</span> <span class="o">=</span> main.cpp <span class="p">$(</span>wildcard problems/<span class="k">*</span>/solution.cpp<span class="p">)</span>
<span class="nv">OBJ</span> <span class="o">=</span> <span class="p">$(</span>SRC:.cpp<span class="o">=</span>.o<span class="p">)</span>
<span class="nv">DEP</span> <span class="o">=</span> <span class="p">$(</span>OBJ:.o<span class="o">=</span>.d<span class="p">)</span>

</code></pre></div></div>

<pre><code>自動收集子目錄內的 source files

自動推導出 object files (.o)

自動推導出 dependency files (.d)
</code></pre>

<p>這等於已經進入了 半自動化建構 的層級。  <br />
3️⃣ 自動 header 聚合器（Header Aggregator）</p>

<pre><code>自己寫了一個簡單的 Shell Script
</code></pre>

<p>generate_problems_hpp.sh</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">OUTFILE</span><span class="o">=</span><span class="s2">"problems.hpp"</span>
<span class="nb">echo</span> <span class="s2">"// Auto-generated file. DO NOT EDIT."</span> <span class="o">&gt;</span> <span class="nv">$OUTFILE</span>
<span class="nb">echo</span> <span class="s2">"#pragma once"</span> <span class="o">&gt;&gt;</span> <span class="nv">$OUTFILE</span>
<span class="nb">echo</span> <span class="s2">""</span> <span class="o">&gt;&gt;</span> <span class="nv">$OUTFILE</span>

<span class="k">for </span>header <span class="k">in</span> <span class="si">$(</span>find problems <span class="nt">-name</span> <span class="s2">"solution.hpp"</span> | <span class="nb">sort</span><span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"#include </span><span class="se">\"</span><span class="nv">$header</span><span class="se">\"</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$OUTFILE</span>
<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"[OK] problems.hpp generated"</span>

</code></pre></div></div>

<p>功能：</p>

<pre><code>自動掃描 problems/*/solution.hpp

生成 problems.hpp 作為 集中 include header

避免手動 include，減少 human error
</code></pre>

<p>這是很多競賽系統、OJ（Online Judge）會用的技術。  <br />
4️⃣ Makefile + Script Integration</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">$(PROBLEMS_HEADER)</span><span class="o">:</span>
	<span class="p">$(</span>GEN_SCRIPT<span class="p">)</span>
</code></pre></div></div>
<pre><code>Makefile 自動呼叫你的 shell script

保證每次 build 時都會生成最新的 problems.hpp
</code></pre>

<p>5️⃣ Dependency Generation（自動依賴管理）</p>
<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CXXFLAGS</span> <span class="o">=</span> <span class="nt">-MMD</span> <span class="nt">-MP</span>
<span class="k">-include</span><span class="sx"> $(DEP)</span>

</code></pre></div></div>

<pre><code>自動追蹤 .hpp 相依

修改 header 時，會自動觸發正確的 recompile

這是 職業 C++ 工程師日常必備  
</code></pre>

<p>6️⃣ Debug / Release 可擴充的架構</p>

<p>雖然你還沒 fully 實作，但其實你已經準備好了：</p>

<pre><code>rebuild: target

CXXFLAGS 隨時可以改成 debug / release

VSCode 配置也已經接上 Makefile build
</code></pre>

<p>7️⃣ VSCode Integration</p>

<pre><code>tasks.json：透過 Makefile 完成 build task

launch.json：正確用 GDB debug

preLaunchTask：保證 debug 時會先自動 build

自訂的 debugger 設定：symbol printing、working directory、gdb mode
</code></pre>

<p>launch.json：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Debug LeetCode Solutions"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build with Makefile"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<p>tasks.json：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build with Makefile"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"make"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"kind"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"isDefault"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"problemMatcher"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"$gcc"</span><span class="p">],</span><span class="w">
            </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Use Makefile to compile all C++ solutions"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<p>8️⃣ GDB Debugger</p>

<pre><code>成功讓 GDB 能正確辨識 symbol

已經能設 breakpoint，進行 step-by-step debug
</code></pre>

<p>✅ 如果簡單一句話形容：</p>

<pre><code>你已經構建了一套 具有自動相依、集中管理、自動 build、自動 debug 的 mini build system
</code></pre>

<h2 id="-技術關鍵字整理">⭐ 技術關鍵字整理：</h2>

<ul>
  <li>
    <p>Makefile</p>
  </li>
  <li>
    <p>GCC / G++</p>
  </li>
  <li>
    <p>Dependency generation (<code>-MMD -MP</code>)</p>
  </li>
  <li>
    <p>Header aggregation</p>
  </li>
  <li>
    <p>Shell Script automation</p>
  </li>
  <li>
    <p>Wildcard file pattern</p>
  </li>
  <li>
    <p>VSCode tasks &amp; launch integration</p>
  </li>
  <li>
    <p>GDB debug integration</p>
  </li>
  <li>
    <p>Debug symbol control (<code>-g</code>)</p>
  </li>
</ul>

<h2 id="執行">執行</h2>
<p>因已在Makefile加入判斷,  若有更動, 執行make rebuild</p>

<p>等同於make clean &amp;&amp; make</p>

<p>然後F5即可運行</p>
]]>
      </content:encoded>
      <wp:post_id>46</wp:post_id>
      <wp:post_date>2025-03-29 16:00:00</wp:post_date>
      <wp:post_date_gmt>2025-03-29 16:00:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <wp:ping_status>open</wp:ping_status>
      <wp:post_name>vscode and  C++ Leetcode專案架構</wp:post_name>
      <wp:status>publish</wp:status>
      <wp:post_parent>0</wp:post_parent>
      <wp:menu_order>0</wp:menu_order>
      <wp:post_type>post</wp:post_type>
      <wp:post_password/>
      <wp:is_sticky>0</wp:is_sticky>
    </item>
  </channel>
</rss>
